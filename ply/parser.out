Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function
Rule 2     main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY
Rule 3     np_add_main_internal_scope -> epsilon
Rule 4     np_start_state -> epsilon
Rule 5     np_start_func_dir -> epsilon
Rule 6     declaration_loop -> declaration declaration_loop
Rule 7     declaration_loop -> epsilon
Rule 8     statement_loop -> statement statement_loop1
Rule 9     statement_loop1 -> statement statement_loop1
Rule 10    statement_loop1 -> epsilon
Rule 11    declaration -> class_declaration
Rule 12    declaration -> variable_declaration
Rule 13    declaration -> function_declaration
Rule 14    variable -> ID variable1
Rule 15    variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET
Rule 16    variable1 -> DOT ID
Rule 17    variable1 -> epsilon
Rule 18    class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
Rule 19    class_declaration1 -> IS ID
Rule 20    class_declaration1 -> epsilon
Rule 21    class_declaration2 -> class_function class_declaration2
Rule 22    class_declaration2 -> epsilon
Rule 23    class_body -> class_body1 class_body3
Rule 24    class_body1 -> variable_declaration class_body2
Rule 25    class_body2 -> variable_declaration class_body2
Rule 26    class_body2 -> epsilon
Rule 27    class_body3 -> class_function_declaration class_body4
Rule 28    class_body4 -> class_function_declaration class_body4
Rule 29    class_body4 -> epsilon
Rule 30    constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY
Rule 31    variable_declaration_loop -> variable_declaration variable_declaration_loop
Rule 32    variable_declaration_loop -> epsilon
Rule 33    variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
Rule 34    variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
Rule 35    variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
Rule 36    np_set_current_var_type -> epsilon
Rule 37    np_set_current_var_data_type -> epsilon
Rule 38    np_set_current_var_name -> epsilon
Rule 39    atomic_var_type -> VAR
Rule 40    atomic_var_type -> GROUP
Rule 41    np_add_variable -> epsilon
Rule 42    variable_declaration1 -> hyper_exp_loop
Rule 43    variable_declaration1 -> epsilon
Rule 44    statement -> assignment
Rule 45    statement -> conditional
Rule 46    statement -> cycle
Rule 47    statement -> read
Rule 48    statement -> write
Rule 49    statement -> function_call
Rule 50    assignment -> variable ASSIGN hyper_exp SEMICOLON
Rule 51    np_add_operator -> epsilon
Rule 52    hyper_exp -> super_exp np_hyper_exp hyper_exp1
Rule 53    hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1
Rule 54    hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1
Rule 55    hyper_exp1 -> epsilon
Rule 56    np_hyper_exp -> epsilon
Rule 57    super_exp -> exp np_super_exp super_exp1
Rule 58    super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1
Rule 59    super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1
Rule 60    super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1
Rule 61    super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
Rule 62    super_exp1 -> epsilon
Rule 63    np_super_exp -> epsilon
Rule 64    exp -> term np_exp exp1
Rule 65    exp1 -> PLUS np_add_operator term np_exp exp1
Rule 66    exp1 -> MINUS np_add_operator term np_exp exp1
Rule 67    exp1 -> epsilon
Rule 68    np_exp -> epsilon
Rule 69    term -> factor np_term term1
Rule 70    term1 -> MULTIPLICATION np_add_operator factor np_term term1
Rule 71    term1 -> DIVISION np_add_operator factor np_term term1
Rule 72    term1 -> epsilon
Rule 73    np_term -> epsilon
Rule 74    factor -> function_call
Rule 75    factor -> FLOAT_VALUE
Rule 76    factor -> INT_VALUE
Rule 77    factor -> BOOL_VALUE
Rule 78    factor -> STRING_VALUE
Rule 79    factor -> variable
Rule 80    factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
Rule 81    np_add_open_parenthesis -> epsilon
Rule 82    np_remove_open_parenthesis -> epsilon
Rule 83    data_type -> INT
Rule 84    data_type -> FLOAT
Rule 85    data_type -> STRING
Rule 86    data_type -> BOOL
Rule 87    class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
Rule 88    return_arg -> data_type
Rule 89    return_arg -> VOID
Rule 90    parameter -> atomic_var_type data_type ID parameter1
Rule 91    parameter -> OBJ ID ID parameter1
Rule 92    parameter -> epsilon
Rule 93    parameter1 -> COMMA atomic_var_type data_type ID parameter1
Rule 94    parameter1 -> COMMA OBJ ID ID parameter1
Rule 95    parameter1 -> epsilon
Rule 96    conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
Rule 97    conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
Rule 98    conditional1 -> np_if_2
Rule 99    np_if_1 -> epsilon
Rule 100   np_if_2 -> epsilon
Rule 101   np_if_3 -> epsilon
Rule 102   cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
Rule 103   cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
Rule 104   cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
Rule 105   cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4
Rule 106   np_check_existance_for_var -> epsilon
Rule 107   np_for_1 -> epsilon
Rule 108   np_for_2 -> epsilon
Rule 109   np_for_3 -> epsilon
Rule 110   np_for_4 -> epsilon
Rule 111   cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3
Rule 112   np_while_1 -> epsilon
Rule 113   np_while_2 -> epsilon
Rule 114   np_while_3 -> epsilon
Rule 115   np_do_while_1 -> epsilon
Rule 116   np_do_while_2 -> epsilon
Rule 117   read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
Rule 118   variable_loop -> variable variable_loop1
Rule 119   variable_loop1 -> COMMA variable variable_loop1
Rule 120   variable_loop1 -> epsilon
Rule 121   write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
Rule 122   write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1
Rule 123   write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
Rule 124   write_hyper_exp_loop1 -> epsilon
Rule 125   np_add_write_quad -> epsilon
Rule 126   hyper_exp_loop -> hyper_exp hyper_exp_loop1
Rule 127   hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1
Rule 128   hyper_exp_loop1 -> epsilon
Rule 129   function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
Rule 130   function_call1 -> DOT ID
Rule 131   function_call1 -> epsilon
Rule 132   function_call2 -> hyper_exp_loop
Rule 133   function_call2 -> epsilon
Rule 134   class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
Rule 135   function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
Rule 136   np_add_function_internal_scope -> epsilon
Rule 137   np_set_function_return_type -> epsilon
Rule 138   function_return -> RETURN hyper_exp SEMICOLON
Rule 139   function_return -> epsilon
Rule 140   function_statement_loop -> statement_loop
Rule 141   function_statement_loop -> epsilon
Rule 142   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 53
ASSIGN               : 34 35 50 102
AT_CLASS             : 134
BOOL                 : 86
BOOL_VALUE           : 77
CLASS                : 18
CLOSE_BRACKET        : 15 34
CLOSE_KEY            : 2 18 30 96 97 104 105 111 134 135
CLOSE_PARENTHESIS    : 2 30 35 80 87 96 103 104 117 121 129 134 135
COMMA                : 93 94 119 123 127
CONSTRUCTOR          : 30
DIVISION             : 71
DO                   : 104
DOT                  : 16 130
ELSE                 : 97
EQUAL_TO             : 60
FLOAT                : 84
FLOAT_VALUE          : 75
FOR                  : 102
FUNCTION             : 87 134 135
GREATER_THAN         : 58
GROUP                : 34 40
ID                   : 1 14 16 18 19 30 33 34 35 35 87 90 91 91 93 94 94 102 129 130 134 134 135
IF                   : 96
INT                  : 83
INT_VALUE            : 34 76
IS                   : 19
LESS_THAN            : 59
MAIN                 : 2
MINUS                : 66
MULTIPLICATION       : 70
NOT_EQUAL_TO         : 61
OBJ                  : 35 91 94
OPEN_BRACKET         : 15 34
OPEN_KEY             : 2 18 30 96 97 104 105 111 134 135
OPEN_PARENTHESIS     : 2 30 35 80 87 96 103 104 117 121 129 134 135
OR                   : 54
PLUS                 : 65
PROGRAM              : 1
READ                 : 117
RETURN               : 138
RETURNS              : 87 134 135
SEMICOLON            : 1 18 33 34 35 50 87 104 117 121 129 138
STRING               : 85
STRING_VALUE         : 78
TO                   : 102
VAR                  : 33 39
VOID                 : 89
WHILE                : 103 104
WRITE                : 121
error                : 

Nonterminals, with rules where they appear

assignment           : 44
atomic_var_type      : 90 93
class_body           : 18
class_body1          : 23
class_body2          : 24 25
class_body3          : 23
class_body4          : 27 28
class_declaration    : 11
class_declaration1   : 18
class_declaration2   : 18 21
class_function       : 21
class_function_declaration : 27 28
conditional          : 45
conditional1         : 96
constructor          : 18
cycle                : 46
cycle_for            : 102
cycle_while          : 103
data_type            : 33 34 88 90 93
declaration          : 6
declaration_loop     : 1 6
epsilon              : 3 4 5 7 10 17 20 22 26 29 32 36 37 38 41 43 51 55 56 62 63 67 68 72 73 81 82 92 95 99 100 101 106 107 108 109 110 112 113 114 115 116 120 124 125 128 131 133 136 137 139 141
exp                  : 57 58 59 60 61
exp1                 : 64 65 66
factor               : 69 70 71
function_call        : 49 74
function_call1       : 129
function_call2       : 129
function_declaration : 13
function_return      : 134 135
function_statement_loop : 134 135
hyper_exp            : 15 50 80 96 102 102 103 104 122 123 126 127 138
hyper_exp1           : 52 53 54
hyper_exp_loop       : 42 132
hyper_exp_loop1      : 126 127
main_function        : 1
np_add_function_internal_scope : 135
np_add_main_internal_scope : 2
np_add_open_parenthesis : 80
np_add_operator      : 53 54 58 59 60 61 65 66 70 71
np_add_variable      : 33 34 35
np_add_write_quad    : 122 123
np_check_existance_for_var : 102
np_do_while_1        : 104
np_do_while_2        : 104
np_exp               : 64 65 66
np_for_1             : 102
np_for_2             : 102
np_for_3             : 102
np_for_4             : 105
np_hyper_exp         : 52 53 54
np_if_1              : 96
np_if_2              : 97 98
np_if_3              : 97
np_remove_open_parenthesis : 80
np_set_current_var_data_type : 33 34
np_set_current_var_name : 33 34 35
np_set_current_var_type : 33 34 35
np_set_function_return_type : 135
np_start_func_dir    : 1
np_start_state       : 1
np_super_exp         : 57 58 59 60 61
np_term              : 69 70 71
np_while_1           : 103
np_while_2           : 103
np_while_3           : 111
parameter            : 30 87 134 135
parameter1           : 90 91 93 94
program              : 0
read                 : 47
return_arg           : 87 134 135
statement            : 8 9
statement_loop       : 2 30 96 97 104 105 111 140
statement_loop1      : 8 9
super_exp            : 52 53 54
super_exp1           : 57 58 59 60 61
term                 : 64 65 66
term1                : 69 70 71
variable             : 50 79 118 119
variable1            : 14
variable_declaration : 12 24 25 31
variable_declaration1 : 35
variable_declaration_loop : 2 31 135
variable_loop        : 117
variable_loop1       : 118 119
write                : 48
write_hyper_exp_loop : 121
write_hyper_exp_loop1 : 122 123

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function
    (4) np_start_state -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    np_start_state                 shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) program -> PROGRAM np_start_state . np_start_func_dir ID SEMICOLON declaration_loop main_function
    (5) np_start_func_dir -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    np_start_func_dir              shift and go to state 5
    epsilon                        shift and go to state 6

state 4

    (4) np_start_state -> epsilon .

    ID              reduce using rule 4 (np_start_state -> epsilon .)


state 5

    (1) program -> PROGRAM np_start_state np_start_func_dir . ID SEMICOLON declaration_loop main_function

    ID              shift and go to state 7


state 6

    (5) np_start_func_dir -> epsilon .

    ID              reduce using rule 5 (np_start_func_dir -> epsilon .)


state 7

    (1) program -> PROGRAM np_start_state np_start_func_dir ID . SEMICOLON declaration_loop main_function

    SEMICOLON       shift and go to state 8


state 8

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON . declaration_loop main_function
    (6) declaration_loop -> . declaration declaration_loop
    (7) declaration_loop -> . epsilon
    (11) declaration -> . class_declaration
    (12) declaration -> . variable_declaration
    (13) declaration -> . function_declaration
    (142) epsilon -> .
    (18) class_declaration -> . CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (135) function_declaration -> . FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    MAIN            reduce using rule 142 (epsilon -> .)
    CLASS           shift and go to state 15
    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        shift and go to state 19

    declaration_loop               shift and go to state 9
    declaration                    shift and go to state 10
    epsilon                        shift and go to state 11
    class_declaration              shift and go to state 12
    variable_declaration           shift and go to state 13
    function_declaration           shift and go to state 14

state 9

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop . main_function
    (2) main_function -> . MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    MAIN            shift and go to state 21

    main_function                  shift and go to state 20

state 10

    (6) declaration_loop -> declaration . declaration_loop
    (6) declaration_loop -> . declaration declaration_loop
    (7) declaration_loop -> . epsilon
    (11) declaration -> . class_declaration
    (12) declaration -> . variable_declaration
    (13) declaration -> . function_declaration
    (142) epsilon -> .
    (18) class_declaration -> . CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (135) function_declaration -> . FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    MAIN            reduce using rule 142 (epsilon -> .)
    CLASS           shift and go to state 15
    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        shift and go to state 19

    declaration                    shift and go to state 10
    declaration_loop               shift and go to state 22
    epsilon                        shift and go to state 11
    class_declaration              shift and go to state 12
    variable_declaration           shift and go to state 13
    function_declaration           shift and go to state 14

state 11

    (7) declaration_loop -> epsilon .

    MAIN            reduce using rule 7 (declaration_loop -> epsilon .)


state 12

    (11) declaration -> class_declaration .

    CLASS           reduce using rule 11 (declaration -> class_declaration .)
    VAR             reduce using rule 11 (declaration -> class_declaration .)
    GROUP           reduce using rule 11 (declaration -> class_declaration .)
    OBJ             reduce using rule 11 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 11 (declaration -> class_declaration .)
    MAIN            reduce using rule 11 (declaration -> class_declaration .)


state 13

    (12) declaration -> variable_declaration .

    CLASS           reduce using rule 12 (declaration -> variable_declaration .)
    VAR             reduce using rule 12 (declaration -> variable_declaration .)
    GROUP           reduce using rule 12 (declaration -> variable_declaration .)
    OBJ             reduce using rule 12 (declaration -> variable_declaration .)
    FUNCTION        reduce using rule 12 (declaration -> variable_declaration .)
    MAIN            reduce using rule 12 (declaration -> variable_declaration .)


state 14

    (13) declaration -> function_declaration .

    CLASS           reduce using rule 13 (declaration -> function_declaration .)
    VAR             reduce using rule 13 (declaration -> function_declaration .)
    GROUP           reduce using rule 13 (declaration -> function_declaration .)
    OBJ             reduce using rule 13 (declaration -> function_declaration .)
    FUNCTION        reduce using rule 13 (declaration -> function_declaration .)
    MAIN            reduce using rule 13 (declaration -> function_declaration .)


state 15

    (18) class_declaration -> CLASS . ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2

    ID              shift and go to state 23


state 16

    (33) variable_declaration -> VAR . np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (142) epsilon -> .

    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    STRING          reduce using rule 142 (epsilon -> .)
    BOOL            reduce using rule 142 (epsilon -> .)

    np_set_current_var_type        shift and go to state 24
    epsilon                        shift and go to state 25

state 17

    (34) variable_declaration -> GROUP . np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    np_set_current_var_type        shift and go to state 26
    epsilon                        shift and go to state 25

state 18

    (35) variable_declaration -> OBJ . np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    np_set_current_var_type        shift and go to state 27
    epsilon                        shift and go to state 25

state 19

    (135) function_declaration -> FUNCTION . ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 28


state 20

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function .

    $end            reduce using rule 1 (program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function .)


state 21

    (2) main_function -> MAIN . np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY
    (3) np_add_main_internal_scope -> . epsilon
    (142) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)

    np_add_main_internal_scope     shift and go to state 29
    epsilon                        shift and go to state 30

state 22

    (6) declaration_loop -> declaration declaration_loop .

    MAIN            reduce using rule 6 (declaration_loop -> declaration declaration_loop .)


state 23

    (18) class_declaration -> CLASS ID . class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (19) class_declaration1 -> . IS ID
    (20) class_declaration1 -> . epsilon
    (142) epsilon -> .

    IS              shift and go to state 32
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    class_declaration1             shift and go to state 31
    epsilon                        shift and go to state 33

state 24

    (33) variable_declaration -> VAR np_set_current_var_type . data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 34

state 25

    (36) np_set_current_var_type -> epsilon .

    INT             reduce using rule 36 (np_set_current_var_type -> epsilon .)
    FLOAT           reduce using rule 36 (np_set_current_var_type -> epsilon .)
    STRING          reduce using rule 36 (np_set_current_var_type -> epsilon .)
    BOOL            reduce using rule 36 (np_set_current_var_type -> epsilon .)
    ID              reduce using rule 36 (np_set_current_var_type -> epsilon .)


state 26

    (34) variable_declaration -> GROUP np_set_current_var_type . ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    ID              shift and go to state 39


state 27

    (35) variable_declaration -> OBJ np_set_current_var_type . ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ID              shift and go to state 40


state 28

    (135) function_declaration -> FUNCTION ID . np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (136) np_add_function_internal_scope -> . epsilon
    (142) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)

    np_add_function_internal_scope shift and go to state 41
    epsilon                        shift and go to state 42

state 29

    (2) main_function -> MAIN np_add_main_internal_scope . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 43


state 30

    (3) np_add_main_internal_scope -> epsilon .

    OPEN_PARENTHESIS reduce using rule 3 (np_add_main_internal_scope -> epsilon .)


state 31

    (18) class_declaration -> CLASS ID class_declaration1 . OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2

    OPEN_KEY        shift and go to state 44


state 32

    (19) class_declaration1 -> IS . ID

    ID              shift and go to state 45


state 33

    (20) class_declaration1 -> epsilon .

    OPEN_KEY        reduce using rule 20 (class_declaration1 -> epsilon .)


state 34

    (33) variable_declaration -> VAR np_set_current_var_type data_type . np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (37) np_set_current_var_data_type -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    np_set_current_var_data_type   shift and go to state 46
    epsilon                        shift and go to state 47

state 35

    (83) data_type -> INT .

    ID              reduce using rule 83 (data_type -> INT .)
    OPEN_BRACKET    reduce using rule 83 (data_type -> INT .)
    OPEN_KEY        reduce using rule 83 (data_type -> INT .)
    SEMICOLON       reduce using rule 83 (data_type -> INT .)


state 36

    (84) data_type -> FLOAT .

    ID              reduce using rule 84 (data_type -> FLOAT .)
    OPEN_BRACKET    reduce using rule 84 (data_type -> FLOAT .)
    OPEN_KEY        reduce using rule 84 (data_type -> FLOAT .)
    SEMICOLON       reduce using rule 84 (data_type -> FLOAT .)


state 37

    (85) data_type -> STRING .

    ID              reduce using rule 85 (data_type -> STRING .)
    OPEN_BRACKET    reduce using rule 85 (data_type -> STRING .)
    OPEN_KEY        reduce using rule 85 (data_type -> STRING .)
    SEMICOLON       reduce using rule 85 (data_type -> STRING .)


state 38

    (86) data_type -> BOOL .

    ID              reduce using rule 86 (data_type -> BOOL .)
    OPEN_BRACKET    reduce using rule 86 (data_type -> BOOL .)
    OPEN_KEY        reduce using rule 86 (data_type -> BOOL .)
    SEMICOLON       reduce using rule 86 (data_type -> BOOL .)


state 39

    (34) variable_declaration -> GROUP np_set_current_var_type ID . np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (142) epsilon -> .

    ASSIGN          reduce using rule 142 (epsilon -> .)

    np_set_current_var_name        shift and go to state 48
    epsilon                        shift and go to state 49

state 40

    (35) variable_declaration -> OBJ np_set_current_var_type ID . np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (142) epsilon -> .

    ASSIGN          reduce using rule 142 (epsilon -> .)

    np_set_current_var_name        shift and go to state 50
    epsilon                        shift and go to state 49

state 41

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 51


state 42

    (136) np_add_function_internal_scope -> epsilon .

    OPEN_PARENTHESIS reduce using rule 136 (np_add_function_internal_scope -> epsilon .)


state 43

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 52


state 44

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY . class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (23) class_body -> . class_body1 class_body3
    (24) class_body1 -> . variable_declaration class_body2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18

    class_body                     shift and go to state 53
    class_body1                    shift and go to state 54
    variable_declaration           shift and go to state 55

state 45

    (19) class_declaration1 -> IS ID .

    OPEN_KEY        reduce using rule 19 (class_declaration1 -> IS ID .)


state 46

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type . ID np_set_current_var_name SEMICOLON np_add_variable

    ID              shift and go to state 56


state 47

    (37) np_set_current_var_data_type -> epsilon .

    ID              reduce using rule 37 (np_set_current_var_data_type -> epsilon .)
    OPEN_BRACKET    reduce using rule 37 (np_set_current_var_data_type -> epsilon .)


state 48

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name . ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    ASSIGN          shift and go to state 57


state 49

    (38) np_set_current_var_name -> epsilon .

    ASSIGN          reduce using rule 38 (np_set_current_var_name -> epsilon .)
    SEMICOLON       reduce using rule 38 (np_set_current_var_name -> epsilon .)


state 50

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name . ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ASSIGN          shift and go to state 58


state 51

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (142) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter                      shift and go to state 59
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 52

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    OPEN_KEY        shift and go to state 65


state 53

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body . CLOSE_KEY SEMICOLON constructor class_declaration2

    CLOSE_KEY       shift and go to state 66


state 54

    (23) class_body -> class_body1 . class_body3
    (27) class_body3 -> . class_function_declaration class_body4
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    FUNCTION        shift and go to state 69

    class_body3                    shift and go to state 67
    class_function_declaration     shift and go to state 68

state 55

    (24) class_body1 -> variable_declaration . class_body2
    (25) class_body2 -> . variable_declaration class_body2
    (26) class_body2 -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (142) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        reduce using rule 142 (epsilon -> .)

    variable_declaration           shift and go to state 70
    class_body2                    shift and go to state 71
    epsilon                        shift and go to state 72

state 56

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID . np_set_current_var_name SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (142) epsilon -> .

    SEMICOLON       reduce using rule 142 (epsilon -> .)

    np_set_current_var_name        shift and go to state 73
    epsilon                        shift and go to state 49

state 57

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN . data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 74

state 58

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN . ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ID              shift and go to state 75


state 59

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 76


state 60

    (90) parameter -> atomic_var_type . data_type ID parameter1
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 77

state 61

    (91) parameter -> OBJ . ID ID parameter1

    ID              shift and go to state 78


state 62

    (92) parameter -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 92 (parameter -> epsilon .)


state 63

    (39) atomic_var_type -> VAR .

    INT             reduce using rule 39 (atomic_var_type -> VAR .)
    FLOAT           reduce using rule 39 (atomic_var_type -> VAR .)
    STRING          reduce using rule 39 (atomic_var_type -> VAR .)
    BOOL            reduce using rule 39 (atomic_var_type -> VAR .)


state 64

    (40) atomic_var_type -> GROUP .

    INT             reduce using rule 40 (atomic_var_type -> GROUP .)
    FLOAT           reduce using rule 40 (atomic_var_type -> GROUP .)
    STRING          reduce using rule 40 (atomic_var_type -> GROUP .)
    BOOL            reduce using rule 40 (atomic_var_type -> GROUP .)


state 65

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY . variable_declaration_loop statement_loop CLOSE_KEY
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (142) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    variable_declaration_loop      shift and go to state 79
    variable_declaration           shift and go to state 80
    epsilon                        shift and go to state 81

state 66

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY . SEMICOLON constructor class_declaration2

    SEMICOLON       shift and go to state 82


state 67

    (23) class_body -> class_body1 class_body3 .

    CLOSE_KEY       reduce using rule 23 (class_body -> class_body1 class_body3 .)


state 68

    (27) class_body3 -> class_function_declaration . class_body4
    (28) class_body4 -> . class_function_declaration class_body4
    (29) class_body4 -> . epsilon
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (142) epsilon -> .

    FUNCTION        shift and go to state 69
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    class_function_declaration     shift and go to state 83
    class_body4                    shift and go to state 84
    epsilon                        shift and go to state 85

state 69

    (87) class_function_declaration -> FUNCTION . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    ID              shift and go to state 86


state 70

    (25) class_body2 -> variable_declaration . class_body2
    (25) class_body2 -> . variable_declaration class_body2
    (26) class_body2 -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (142) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        reduce using rule 142 (epsilon -> .)

    variable_declaration           shift and go to state 70
    class_body2                    shift and go to state 87
    epsilon                        shift and go to state 72

state 71

    (24) class_body1 -> variable_declaration class_body2 .

    FUNCTION        reduce using rule 24 (class_body1 -> variable_declaration class_body2 .)


state 72

    (26) class_body2 -> epsilon .

    FUNCTION        reduce using rule 26 (class_body2 -> epsilon .)


state 73

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 88


state 74

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type . np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (37) np_set_current_var_data_type -> . epsilon
    (142) epsilon -> .

    OPEN_BRACKET    reduce using rule 142 (epsilon -> .)

    np_set_current_var_data_type   shift and go to state 89
    epsilon                        shift and go to state 47

state 75

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID . OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    OPEN_PARENTHESIS shift and go to state 90


state 76

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    RETURNS         shift and go to state 91


state 77

    (90) parameter -> atomic_var_type data_type . ID parameter1

    ID              shift and go to state 92


state 78

    (91) parameter -> OBJ ID . ID parameter1

    ID              shift and go to state 93


state 79

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop . statement_loop CLOSE_KEY
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 94
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 80

    (31) variable_declaration_loop -> variable_declaration . variable_declaration_loop
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (142) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    variable_declaration           shift and go to state 80
    variable_declaration_loop      shift and go to state 110
    epsilon                        shift and go to state 81

state 81

    (32) variable_declaration_loop -> epsilon .

    IF              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    FOR             reduce using rule 32 (variable_declaration_loop -> epsilon .)
    WHILE           reduce using rule 32 (variable_declaration_loop -> epsilon .)
    DO              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    READ            reduce using rule 32 (variable_declaration_loop -> epsilon .)
    WRITE           reduce using rule 32 (variable_declaration_loop -> epsilon .)
    ID              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    RETURN          reduce using rule 32 (variable_declaration_loop -> epsilon .)
    CLOSE_KEY       reduce using rule 32 (variable_declaration_loop -> epsilon .)


state 82

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON . constructor class_declaration2
    (30) constructor -> . CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    CONSTRUCTOR     shift and go to state 112

    constructor                    shift and go to state 111

state 83

    (28) class_body4 -> class_function_declaration . class_body4
    (28) class_body4 -> . class_function_declaration class_body4
    (29) class_body4 -> . epsilon
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (142) epsilon -> .

    FUNCTION        shift and go to state 69
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    class_function_declaration     shift and go to state 83
    class_body4                    shift and go to state 113
    epsilon                        shift and go to state 85

state 84

    (27) class_body3 -> class_function_declaration class_body4 .

    CLOSE_KEY       reduce using rule 27 (class_body3 -> class_function_declaration class_body4 .)


state 85

    (29) class_body4 -> epsilon .

    CLOSE_KEY       reduce using rule 29 (class_body4 -> epsilon .)


state 86

    (87) class_function_declaration -> FUNCTION ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    OPEN_PARENTHESIS shift and go to state 114


state 87

    (25) class_body2 -> variable_declaration class_body2 .

    FUNCTION        reduce using rule 25 (class_body2 -> variable_declaration class_body2 .)


state 88

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (142) epsilon -> .

    CLASS           reduce using rule 142 (epsilon -> .)
    VAR             reduce using rule 142 (epsilon -> .)
    GROUP           reduce using rule 142 (epsilon -> .)
    OBJ             reduce using rule 142 (epsilon -> .)
    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    np_add_variable                shift and go to state 115
    epsilon                        shift and go to state 116

state 89

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type . OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    OPEN_BRACKET    shift and go to state 117


state 90

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS . variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (42) variable_declaration1 -> . hyper_exp_loop
    (43) variable_declaration1 -> . epsilon
    (126) hyper_exp_loop -> . hyper_exp hyper_exp_loop1
    (142) epsilon -> .
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    variable_declaration1          shift and go to state 119
    hyper_exp_loop                 shift and go to state 120
    epsilon                        shift and go to state 121
    hyper_exp                      shift and go to state 122
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 91

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 133
    data_type                      shift and go to state 134

state 92

    (90) parameter -> atomic_var_type data_type ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter1                     shift and go to state 136
    epsilon                        shift and go to state 138

state 93

    (91) parameter -> OBJ ID ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter1                     shift and go to state 139
    epsilon                        shift and go to state 138

state 94

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop . CLOSE_KEY

    CLOSE_KEY       shift and go to state 140


state 95

    (8) statement_loop -> statement . statement_loop1
    (9) statement_loop1 -> . statement statement_loop1
    (10) statement_loop1 -> . epsilon
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (142) epsilon -> .
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement                      shift and go to state 141
    statement_loop1                shift and go to state 142
    epsilon                        shift and go to state 143
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 96

    (44) statement -> assignment .

    IF              reduce using rule 44 (statement -> assignment .)
    FOR             reduce using rule 44 (statement -> assignment .)
    WHILE           reduce using rule 44 (statement -> assignment .)
    DO              reduce using rule 44 (statement -> assignment .)
    READ            reduce using rule 44 (statement -> assignment .)
    WRITE           reduce using rule 44 (statement -> assignment .)
    ID              reduce using rule 44 (statement -> assignment .)
    CLOSE_KEY       reduce using rule 44 (statement -> assignment .)
    RETURN          reduce using rule 44 (statement -> assignment .)


state 97

    (45) statement -> conditional .

    IF              reduce using rule 45 (statement -> conditional .)
    FOR             reduce using rule 45 (statement -> conditional .)
    WHILE           reduce using rule 45 (statement -> conditional .)
    DO              reduce using rule 45 (statement -> conditional .)
    READ            reduce using rule 45 (statement -> conditional .)
    WRITE           reduce using rule 45 (statement -> conditional .)
    ID              reduce using rule 45 (statement -> conditional .)
    CLOSE_KEY       reduce using rule 45 (statement -> conditional .)
    RETURN          reduce using rule 45 (statement -> conditional .)


state 98

    (46) statement -> cycle .

    IF              reduce using rule 46 (statement -> cycle .)
    FOR             reduce using rule 46 (statement -> cycle .)
    WHILE           reduce using rule 46 (statement -> cycle .)
    DO              reduce using rule 46 (statement -> cycle .)
    READ            reduce using rule 46 (statement -> cycle .)
    WRITE           reduce using rule 46 (statement -> cycle .)
    ID              reduce using rule 46 (statement -> cycle .)
    CLOSE_KEY       reduce using rule 46 (statement -> cycle .)
    RETURN          reduce using rule 46 (statement -> cycle .)


state 99

    (47) statement -> read .

    IF              reduce using rule 47 (statement -> read .)
    FOR             reduce using rule 47 (statement -> read .)
    WHILE           reduce using rule 47 (statement -> read .)
    DO              reduce using rule 47 (statement -> read .)
    READ            reduce using rule 47 (statement -> read .)
    WRITE           reduce using rule 47 (statement -> read .)
    ID              reduce using rule 47 (statement -> read .)
    CLOSE_KEY       reduce using rule 47 (statement -> read .)
    RETURN          reduce using rule 47 (statement -> read .)


state 100

    (48) statement -> write .

    IF              reduce using rule 48 (statement -> write .)
    FOR             reduce using rule 48 (statement -> write .)
    WHILE           reduce using rule 48 (statement -> write .)
    DO              reduce using rule 48 (statement -> write .)
    READ            reduce using rule 48 (statement -> write .)
    WRITE           reduce using rule 48 (statement -> write .)
    ID              reduce using rule 48 (statement -> write .)
    CLOSE_KEY       reduce using rule 48 (statement -> write .)
    RETURN          reduce using rule 48 (statement -> write .)


state 101

    (49) statement -> function_call .

    IF              reduce using rule 49 (statement -> function_call .)
    FOR             reduce using rule 49 (statement -> function_call .)
    WHILE           reduce using rule 49 (statement -> function_call .)
    DO              reduce using rule 49 (statement -> function_call .)
    READ            reduce using rule 49 (statement -> function_call .)
    WRITE           reduce using rule 49 (statement -> function_call .)
    ID              reduce using rule 49 (statement -> function_call .)
    CLOSE_KEY       reduce using rule 49 (statement -> function_call .)
    RETURN          reduce using rule 49 (statement -> function_call .)


state 102

    (50) assignment -> variable . ASSIGN hyper_exp SEMICOLON

    ASSIGN          shift and go to state 144


state 103

    (96) conditional -> IF . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1

    OPEN_PARENTHESIS shift and go to state 145


state 104

    (102) cycle -> FOR . ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for

    ID              shift and go to state 146


state 105

    (129) function_call -> ID . function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> ID . variable1
    (130) function_call1 -> . DOT ID
    (131) function_call1 -> . epsilon
    (15) variable1 -> . OPEN_BRACKET hyper_exp CLOSE_BRACKET
    (16) variable1 -> . DOT ID
    (17) variable1 -> . epsilon
    (142) epsilon -> .

    DOT             shift and go to state 149
    OPEN_BRACKET    shift and go to state 151
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ASSIGN          reduce using rule 142 (epsilon -> .)
    MULTIPLICATION  reduce using rule 142 (epsilon -> .)
    DIVISION        reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    function_call1                 shift and go to state 147
    variable1                      shift and go to state 148
    epsilon                        shift and go to state 150

state 106

    (103) cycle -> WHILE . np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (112) np_while_1 -> . epsilon
    (142) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)

    np_while_1                     shift and go to state 152
    epsilon                        shift and go to state 153

state 107

    (104) cycle -> DO . np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (115) np_do_while_1 -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_do_while_1                  shift and go to state 154
    epsilon                        shift and go to state 155

state 108

    (117) read -> READ . OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 156


state 109

    (121) write -> WRITE . OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 157


state 110

    (31) variable_declaration_loop -> variable_declaration variable_declaration_loop .

    IF              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    FOR             reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    WHILE           reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    DO              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    READ            reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    WRITE           reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    ID              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    RETURN          reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    CLOSE_KEY       reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)


state 111

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor . class_declaration2
    (21) class_declaration2 -> . class_function class_declaration2
    (22) class_declaration2 -> . epsilon
    (134) class_function -> . AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (142) epsilon -> .

    AT_CLASS        shift and go to state 161
    CLASS           reduce using rule 142 (epsilon -> .)
    VAR             reduce using rule 142 (epsilon -> .)
    GROUP           reduce using rule 142 (epsilon -> .)
    OBJ             reduce using rule 142 (epsilon -> .)
    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)

    class_declaration2             shift and go to state 158
    class_function                 shift and go to state 159
    epsilon                        shift and go to state 160

state 112

    (30) constructor -> CONSTRUCTOR . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    ID              shift and go to state 162


state 113

    (28) class_body4 -> class_function_declaration class_body4 .

    CLOSE_KEY       reduce using rule 28 (class_body4 -> class_function_declaration class_body4 .)


state 114

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (142) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter                      shift and go to state 163
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 115

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .

    CLASS           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    VAR             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    GROUP           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    OBJ             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    MAIN            reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    IF              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    FOR             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    WHILE           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    DO              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    READ            reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    WRITE           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    ID              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    RETURN          reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)


state 116

    (41) np_add_variable -> epsilon .

    CLASS           reduce using rule 41 (np_add_variable -> epsilon .)
    VAR             reduce using rule 41 (np_add_variable -> epsilon .)
    GROUP           reduce using rule 41 (np_add_variable -> epsilon .)
    OBJ             reduce using rule 41 (np_add_variable -> epsilon .)
    FUNCTION        reduce using rule 41 (np_add_variable -> epsilon .)
    MAIN            reduce using rule 41 (np_add_variable -> epsilon .)
    IF              reduce using rule 41 (np_add_variable -> epsilon .)
    FOR             reduce using rule 41 (np_add_variable -> epsilon .)
    WHILE           reduce using rule 41 (np_add_variable -> epsilon .)
    DO              reduce using rule 41 (np_add_variable -> epsilon .)
    READ            reduce using rule 41 (np_add_variable -> epsilon .)
    WRITE           reduce using rule 41 (np_add_variable -> epsilon .)
    ID              reduce using rule 41 (np_add_variable -> epsilon .)
    RETURN          reduce using rule 41 (np_add_variable -> epsilon .)
    CLOSE_KEY       reduce using rule 41 (np_add_variable -> epsilon .)


state 117

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET . INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    INT_VALUE       shift and go to state 164


state 118

    (80) factor -> OPEN_PARENTHESIS . np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (81) np_add_open_parenthesis -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_open_parenthesis        shift and go to state 165
    epsilon                        shift and go to state 166

state 119

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 . CLOSE_PARENTHESIS SEMICOLON np_add_variable

    CLOSE_PARENTHESIS shift and go to state 167


state 120

    (42) variable_declaration1 -> hyper_exp_loop .

    CLOSE_PARENTHESIS reduce using rule 42 (variable_declaration1 -> hyper_exp_loop .)


state 121

    (43) variable_declaration1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 43 (variable_declaration1 -> epsilon .)


state 122

    (126) hyper_exp_loop -> hyper_exp . hyper_exp_loop1
    (127) hyper_exp_loop1 -> . COMMA hyper_exp hyper_exp_loop1
    (128) hyper_exp_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 169
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    hyper_exp_loop1                shift and go to state 168
    epsilon                        shift and go to state 170

state 123

    (52) hyper_exp -> super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (142) epsilon -> .

    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_hyper_exp                   shift and go to state 171
    epsilon                        shift and go to state 172

state 124

    (57) super_exp -> exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_super_exp                   shift and go to state 173
    epsilon                        shift and go to state 174

state 125

    (64) exp -> term . np_exp exp1
    (68) np_exp -> . epsilon
    (142) epsilon -> .

    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_exp                         shift and go to state 175
    epsilon                        shift and go to state 176

state 126

    (69) term -> factor . np_term term1
    (73) np_term -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  reduce using rule 142 (epsilon -> .)
    DIVISION        reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_term                        shift and go to state 177
    epsilon                        shift and go to state 178

state 127

    (74) factor -> function_call .

    MULTIPLICATION  reduce using rule 74 (factor -> function_call .)
    DIVISION        reduce using rule 74 (factor -> function_call .)
    PLUS            reduce using rule 74 (factor -> function_call .)
    MINUS           reduce using rule 74 (factor -> function_call .)
    GREATER_THAN    reduce using rule 74 (factor -> function_call .)
    LESS_THAN       reduce using rule 74 (factor -> function_call .)
    EQUAL_TO        reduce using rule 74 (factor -> function_call .)
    NOT_EQUAL_TO    reduce using rule 74 (factor -> function_call .)
    AND             reduce using rule 74 (factor -> function_call .)
    OR              reduce using rule 74 (factor -> function_call .)
    COMMA           reduce using rule 74 (factor -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 74 (factor -> function_call .)
    SEMICOLON       reduce using rule 74 (factor -> function_call .)
    CLOSE_BRACKET   reduce using rule 74 (factor -> function_call .)
    TO              reduce using rule 74 (factor -> function_call .)
    OPEN_KEY        reduce using rule 74 (factor -> function_call .)


state 128

    (75) factor -> FLOAT_VALUE .

    MULTIPLICATION  reduce using rule 75 (factor -> FLOAT_VALUE .)
    DIVISION        reduce using rule 75 (factor -> FLOAT_VALUE .)
    PLUS            reduce using rule 75 (factor -> FLOAT_VALUE .)
    MINUS           reduce using rule 75 (factor -> FLOAT_VALUE .)
    GREATER_THAN    reduce using rule 75 (factor -> FLOAT_VALUE .)
    LESS_THAN       reduce using rule 75 (factor -> FLOAT_VALUE .)
    EQUAL_TO        reduce using rule 75 (factor -> FLOAT_VALUE .)
    NOT_EQUAL_TO    reduce using rule 75 (factor -> FLOAT_VALUE .)
    AND             reduce using rule 75 (factor -> FLOAT_VALUE .)
    OR              reduce using rule 75 (factor -> FLOAT_VALUE .)
    COMMA           reduce using rule 75 (factor -> FLOAT_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 75 (factor -> FLOAT_VALUE .)
    SEMICOLON       reduce using rule 75 (factor -> FLOAT_VALUE .)
    CLOSE_BRACKET   reduce using rule 75 (factor -> FLOAT_VALUE .)
    TO              reduce using rule 75 (factor -> FLOAT_VALUE .)
    OPEN_KEY        reduce using rule 75 (factor -> FLOAT_VALUE .)


state 129

    (76) factor -> INT_VALUE .

    MULTIPLICATION  reduce using rule 76 (factor -> INT_VALUE .)
    DIVISION        reduce using rule 76 (factor -> INT_VALUE .)
    PLUS            reduce using rule 76 (factor -> INT_VALUE .)
    MINUS           reduce using rule 76 (factor -> INT_VALUE .)
    GREATER_THAN    reduce using rule 76 (factor -> INT_VALUE .)
    LESS_THAN       reduce using rule 76 (factor -> INT_VALUE .)
    EQUAL_TO        reduce using rule 76 (factor -> INT_VALUE .)
    NOT_EQUAL_TO    reduce using rule 76 (factor -> INT_VALUE .)
    AND             reduce using rule 76 (factor -> INT_VALUE .)
    OR              reduce using rule 76 (factor -> INT_VALUE .)
    COMMA           reduce using rule 76 (factor -> INT_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 76 (factor -> INT_VALUE .)
    SEMICOLON       reduce using rule 76 (factor -> INT_VALUE .)
    CLOSE_BRACKET   reduce using rule 76 (factor -> INT_VALUE .)
    TO              reduce using rule 76 (factor -> INT_VALUE .)
    OPEN_KEY        reduce using rule 76 (factor -> INT_VALUE .)


state 130

    (77) factor -> BOOL_VALUE .

    MULTIPLICATION  reduce using rule 77 (factor -> BOOL_VALUE .)
    DIVISION        reduce using rule 77 (factor -> BOOL_VALUE .)
    PLUS            reduce using rule 77 (factor -> BOOL_VALUE .)
    MINUS           reduce using rule 77 (factor -> BOOL_VALUE .)
    GREATER_THAN    reduce using rule 77 (factor -> BOOL_VALUE .)
    LESS_THAN       reduce using rule 77 (factor -> BOOL_VALUE .)
    EQUAL_TO        reduce using rule 77 (factor -> BOOL_VALUE .)
    NOT_EQUAL_TO    reduce using rule 77 (factor -> BOOL_VALUE .)
    AND             reduce using rule 77 (factor -> BOOL_VALUE .)
    OR              reduce using rule 77 (factor -> BOOL_VALUE .)
    COMMA           reduce using rule 77 (factor -> BOOL_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 77 (factor -> BOOL_VALUE .)
    SEMICOLON       reduce using rule 77 (factor -> BOOL_VALUE .)
    CLOSE_BRACKET   reduce using rule 77 (factor -> BOOL_VALUE .)
    TO              reduce using rule 77 (factor -> BOOL_VALUE .)
    OPEN_KEY        reduce using rule 77 (factor -> BOOL_VALUE .)


state 131

    (78) factor -> STRING_VALUE .

    MULTIPLICATION  reduce using rule 78 (factor -> STRING_VALUE .)
    DIVISION        reduce using rule 78 (factor -> STRING_VALUE .)
    PLUS            reduce using rule 78 (factor -> STRING_VALUE .)
    MINUS           reduce using rule 78 (factor -> STRING_VALUE .)
    GREATER_THAN    reduce using rule 78 (factor -> STRING_VALUE .)
    LESS_THAN       reduce using rule 78 (factor -> STRING_VALUE .)
    EQUAL_TO        reduce using rule 78 (factor -> STRING_VALUE .)
    NOT_EQUAL_TO    reduce using rule 78 (factor -> STRING_VALUE .)
    AND             reduce using rule 78 (factor -> STRING_VALUE .)
    OR              reduce using rule 78 (factor -> STRING_VALUE .)
    COMMA           reduce using rule 78 (factor -> STRING_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 78 (factor -> STRING_VALUE .)
    SEMICOLON       reduce using rule 78 (factor -> STRING_VALUE .)
    CLOSE_BRACKET   reduce using rule 78 (factor -> STRING_VALUE .)
    TO              reduce using rule 78 (factor -> STRING_VALUE .)
    OPEN_KEY        reduce using rule 78 (factor -> STRING_VALUE .)


state 132

    (79) factor -> variable .

    MULTIPLICATION  reduce using rule 79 (factor -> variable .)
    DIVISION        reduce using rule 79 (factor -> variable .)
    PLUS            reduce using rule 79 (factor -> variable .)
    MINUS           reduce using rule 79 (factor -> variable .)
    GREATER_THAN    reduce using rule 79 (factor -> variable .)
    LESS_THAN       reduce using rule 79 (factor -> variable .)
    EQUAL_TO        reduce using rule 79 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 79 (factor -> variable .)
    AND             reduce using rule 79 (factor -> variable .)
    OR              reduce using rule 79 (factor -> variable .)
    COMMA           reduce using rule 79 (factor -> variable .)
    CLOSE_PARENTHESIS reduce using rule 79 (factor -> variable .)
    SEMICOLON       reduce using rule 79 (factor -> variable .)
    CLOSE_BRACKET   reduce using rule 79 (factor -> variable .)
    TO              reduce using rule 79 (factor -> variable .)
    OPEN_KEY        reduce using rule 79 (factor -> variable .)


state 133

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (137) np_set_function_return_type -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_set_function_return_type    shift and go to state 179
    epsilon                        shift and go to state 180

state 134

    (88) return_arg -> data_type .

    OPEN_KEY        reduce using rule 88 (return_arg -> data_type .)
    SEMICOLON       reduce using rule 88 (return_arg -> data_type .)


state 135

    (89) return_arg -> VOID .

    OPEN_KEY        reduce using rule 89 (return_arg -> VOID .)
    SEMICOLON       reduce using rule 89 (return_arg -> VOID .)


state 136

    (90) parameter -> atomic_var_type data_type ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 90 (parameter -> atomic_var_type data_type ID parameter1 .)


state 137

    (93) parameter1 -> COMMA . atomic_var_type data_type ID parameter1
    (94) parameter1 -> COMMA . OBJ ID ID parameter1
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP

    OBJ             shift and go to state 182
    VAR             shift and go to state 63
    GROUP           shift and go to state 64

    atomic_var_type                shift and go to state 181

state 138

    (95) parameter1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 95 (parameter1 -> epsilon .)


state 139

    (91) parameter -> OBJ ID ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 91 (parameter -> OBJ ID ID parameter1 .)


state 140

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY .

    $end            reduce using rule 2 (main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY .)


state 141

    (9) statement_loop1 -> statement . statement_loop1
    (9) statement_loop1 -> . statement statement_loop1
    (10) statement_loop1 -> . epsilon
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (142) epsilon -> .
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement                      shift and go to state 141
    statement_loop1                shift and go to state 183
    epsilon                        shift and go to state 143
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 142

    (8) statement_loop -> statement statement_loop1 .

    CLOSE_KEY       reduce using rule 8 (statement_loop -> statement statement_loop1 .)
    RETURN          reduce using rule 8 (statement_loop -> statement statement_loop1 .)


state 143

    (10) statement_loop1 -> epsilon .

    CLOSE_KEY       reduce using rule 10 (statement_loop1 -> epsilon .)
    RETURN          reduce using rule 10 (statement_loop1 -> epsilon .)


state 144

    (50) assignment -> variable ASSIGN . hyper_exp SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    variable                       shift and go to state 132
    hyper_exp                      shift and go to state 184
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127

state 145

    (96) conditional -> IF OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 185
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 146

    (102) cycle -> FOR ID . np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (106) np_check_existance_for_var -> . epsilon
    (142) epsilon -> .

    ASSIGN          reduce using rule 142 (epsilon -> .)

    np_check_existance_for_var     shift and go to state 186
    epsilon                        shift and go to state 187

state 147

    (129) function_call -> ID function_call1 . OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 188


state 148

    (14) variable -> ID variable1 .

    ASSIGN          reduce using rule 14 (variable -> ID variable1 .)
    MULTIPLICATION  reduce using rule 14 (variable -> ID variable1 .)
    DIVISION        reduce using rule 14 (variable -> ID variable1 .)
    PLUS            reduce using rule 14 (variable -> ID variable1 .)
    MINUS           reduce using rule 14 (variable -> ID variable1 .)
    GREATER_THAN    reduce using rule 14 (variable -> ID variable1 .)
    LESS_THAN       reduce using rule 14 (variable -> ID variable1 .)
    EQUAL_TO        reduce using rule 14 (variable -> ID variable1 .)
    NOT_EQUAL_TO    reduce using rule 14 (variable -> ID variable1 .)
    AND             reduce using rule 14 (variable -> ID variable1 .)
    OR              reduce using rule 14 (variable -> ID variable1 .)
    COMMA           reduce using rule 14 (variable -> ID variable1 .)
    CLOSE_PARENTHESIS reduce using rule 14 (variable -> ID variable1 .)
    SEMICOLON       reduce using rule 14 (variable -> ID variable1 .)
    CLOSE_BRACKET   reduce using rule 14 (variable -> ID variable1 .)
    TO              reduce using rule 14 (variable -> ID variable1 .)
    OPEN_KEY        reduce using rule 14 (variable -> ID variable1 .)


state 149

    (130) function_call1 -> DOT . ID
    (16) variable1 -> DOT . ID

    ID              shift and go to state 189


state 150

    (131) function_call1 -> epsilon .
    (17) variable1 -> epsilon .

    OPEN_PARENTHESIS reduce using rule 131 (function_call1 -> epsilon .)
    ASSIGN          reduce using rule 17 (variable1 -> epsilon .)
    MULTIPLICATION  reduce using rule 17 (variable1 -> epsilon .)
    DIVISION        reduce using rule 17 (variable1 -> epsilon .)
    PLUS            reduce using rule 17 (variable1 -> epsilon .)
    MINUS           reduce using rule 17 (variable1 -> epsilon .)
    GREATER_THAN    reduce using rule 17 (variable1 -> epsilon .)
    LESS_THAN       reduce using rule 17 (variable1 -> epsilon .)
    EQUAL_TO        reduce using rule 17 (variable1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 17 (variable1 -> epsilon .)
    AND             reduce using rule 17 (variable1 -> epsilon .)
    OR              reduce using rule 17 (variable1 -> epsilon .)
    COMMA           reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 17 (variable1 -> epsilon .)
    SEMICOLON       reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 17 (variable1 -> epsilon .)
    TO              reduce using rule 17 (variable1 -> epsilon .)
    OPEN_KEY        reduce using rule 17 (variable1 -> epsilon .)


state 151

    (15) variable1 -> OPEN_BRACKET . hyper_exp CLOSE_BRACKET
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 190
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 152

    (103) cycle -> WHILE np_while_1 . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while

    OPEN_PARENTHESIS shift and go to state 191


state 153

    (112) np_while_1 -> epsilon .

    OPEN_PARENTHESIS reduce using rule 112 (np_while_1 -> epsilon .)


state 154

    (104) cycle -> DO np_do_while_1 . OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    OPEN_KEY        shift and go to state 192


state 155

    (115) np_do_while_1 -> epsilon .

    OPEN_KEY        reduce using rule 115 (np_do_while_1 -> epsilon .)


state 156

    (117) read -> READ OPEN_PARENTHESIS . variable_loop CLOSE_PARENTHESIS SEMICOLON
    (118) variable_loop -> . variable variable_loop1
    (14) variable -> . ID variable1

    ID              shift and go to state 195

    variable_loop                  shift and go to state 193
    variable                       shift and go to state 194

state 157

    (121) write -> WRITE OPEN_PARENTHESIS . write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (122) write_hyper_exp_loop -> . hyper_exp np_add_write_quad write_hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    write_hyper_exp_loop           shift and go to state 196
    hyper_exp                      shift and go to state 197
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 158

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .

    CLASS           reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    VAR             reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    GROUP           reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    OBJ             reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    FUNCTION        reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    MAIN            reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)


state 159

    (21) class_declaration2 -> class_function . class_declaration2
    (21) class_declaration2 -> . class_function class_declaration2
    (22) class_declaration2 -> . epsilon
    (134) class_function -> . AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (142) epsilon -> .

    AT_CLASS        shift and go to state 161
    CLASS           reduce using rule 142 (epsilon -> .)
    VAR             reduce using rule 142 (epsilon -> .)
    GROUP           reduce using rule 142 (epsilon -> .)
    OBJ             reduce using rule 142 (epsilon -> .)
    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)

    class_function                 shift and go to state 159
    class_declaration2             shift and go to state 198
    epsilon                        shift and go to state 160

state 160

    (22) class_declaration2 -> epsilon .

    CLASS           reduce using rule 22 (class_declaration2 -> epsilon .)
    VAR             reduce using rule 22 (class_declaration2 -> epsilon .)
    GROUP           reduce using rule 22 (class_declaration2 -> epsilon .)
    OBJ             reduce using rule 22 (class_declaration2 -> epsilon .)
    FUNCTION        reduce using rule 22 (class_declaration2 -> epsilon .)
    MAIN            reduce using rule 22 (class_declaration2 -> epsilon .)


state 161

    (134) class_function -> AT_CLASS . ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 199


state 162

    (30) constructor -> CONSTRUCTOR ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 200


state 163

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 201


state 164

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE . CLOSE_BRACKET SEMICOLON np_add_variable

    CLOSE_BRACKET   shift and go to state 202


state 165

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis . hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 203
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 166

    (81) np_add_open_parenthesis -> epsilon .

    FLOAT_VALUE     reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    INT_VALUE       reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    BOOL_VALUE      reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    STRING_VALUE    reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    OPEN_PARENTHESIS reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    ID              reduce using rule 81 (np_add_open_parenthesis -> epsilon .)


state 167

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 204


state 168

    (126) hyper_exp_loop -> hyper_exp hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 126 (hyper_exp_loop -> hyper_exp hyper_exp_loop1 .)


state 169

    (127) hyper_exp_loop1 -> COMMA . hyper_exp hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 205
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 170

    (128) hyper_exp_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 128 (hyper_exp_loop1 -> epsilon .)


state 171

    (52) hyper_exp -> super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (142) epsilon -> .

    AND             shift and go to state 207
    OR              shift and go to state 208
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    hyper_exp1                     shift and go to state 206
    epsilon                        shift and go to state 209

state 172

    (56) np_hyper_exp -> epsilon .

    AND             reduce using rule 56 (np_hyper_exp -> epsilon .)
    OR              reduce using rule 56 (np_hyper_exp -> epsilon .)
    COMMA           reduce using rule 56 (np_hyper_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 56 (np_hyper_exp -> epsilon .)
    SEMICOLON       reduce using rule 56 (np_hyper_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 56 (np_hyper_exp -> epsilon .)
    TO              reduce using rule 56 (np_hyper_exp -> epsilon .)
    OPEN_KEY        reduce using rule 56 (np_hyper_exp -> epsilon .)


state 173

    (57) super_exp -> exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    shift and go to state 211
    LESS_THAN       shift and go to state 212
    EQUAL_TO        shift and go to state 213
    NOT_EQUAL_TO    shift and go to state 214
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    super_exp1                     shift and go to state 210
    epsilon                        shift and go to state 215

state 174

    (63) np_super_exp -> epsilon .

    GREATER_THAN    reduce using rule 63 (np_super_exp -> epsilon .)
    LESS_THAN       reduce using rule 63 (np_super_exp -> epsilon .)
    EQUAL_TO        reduce using rule 63 (np_super_exp -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 63 (np_super_exp -> epsilon .)
    AND             reduce using rule 63 (np_super_exp -> epsilon .)
    OR              reduce using rule 63 (np_super_exp -> epsilon .)
    COMMA           reduce using rule 63 (np_super_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 63 (np_super_exp -> epsilon .)
    SEMICOLON       reduce using rule 63 (np_super_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 63 (np_super_exp -> epsilon .)
    TO              reduce using rule 63 (np_super_exp -> epsilon .)
    OPEN_KEY        reduce using rule 63 (np_super_exp -> epsilon .)


state 175

    (64) exp -> term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (142) epsilon -> .

    PLUS            shift and go to state 217
    MINUS           shift and go to state 218
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    exp1                           shift and go to state 216
    epsilon                        shift and go to state 219

state 176

    (68) np_exp -> epsilon .

    PLUS            reduce using rule 68 (np_exp -> epsilon .)
    MINUS           reduce using rule 68 (np_exp -> epsilon .)
    GREATER_THAN    reduce using rule 68 (np_exp -> epsilon .)
    LESS_THAN       reduce using rule 68 (np_exp -> epsilon .)
    EQUAL_TO        reduce using rule 68 (np_exp -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 68 (np_exp -> epsilon .)
    AND             reduce using rule 68 (np_exp -> epsilon .)
    OR              reduce using rule 68 (np_exp -> epsilon .)
    COMMA           reduce using rule 68 (np_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 68 (np_exp -> epsilon .)
    SEMICOLON       reduce using rule 68 (np_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 68 (np_exp -> epsilon .)
    TO              reduce using rule 68 (np_exp -> epsilon .)
    OPEN_KEY        reduce using rule 68 (np_exp -> epsilon .)


state 177

    (69) term -> factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  shift and go to state 221
    DIVISION        shift and go to state 222
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    term1                          shift and go to state 220
    epsilon                        shift and go to state 223

state 178

    (73) np_term -> epsilon .

    MULTIPLICATION  reduce using rule 73 (np_term -> epsilon .)
    DIVISION        reduce using rule 73 (np_term -> epsilon .)
    PLUS            reduce using rule 73 (np_term -> epsilon .)
    MINUS           reduce using rule 73 (np_term -> epsilon .)
    GREATER_THAN    reduce using rule 73 (np_term -> epsilon .)
    LESS_THAN       reduce using rule 73 (np_term -> epsilon .)
    EQUAL_TO        reduce using rule 73 (np_term -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 73 (np_term -> epsilon .)
    AND             reduce using rule 73 (np_term -> epsilon .)
    OR              reduce using rule 73 (np_term -> epsilon .)
    COMMA           reduce using rule 73 (np_term -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 73 (np_term -> epsilon .)
    SEMICOLON       reduce using rule 73 (np_term -> epsilon .)
    CLOSE_BRACKET   reduce using rule 73 (np_term -> epsilon .)
    TO              reduce using rule 73 (np_term -> epsilon .)
    OPEN_KEY        reduce using rule 73 (np_term -> epsilon .)


state 179

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type . OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    OPEN_KEY        shift and go to state 224


state 180

    (137) np_set_function_return_type -> epsilon .

    OPEN_KEY        reduce using rule 137 (np_set_function_return_type -> epsilon .)


state 181

    (93) parameter1 -> COMMA atomic_var_type . data_type ID parameter1
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 225

state 182

    (94) parameter1 -> COMMA OBJ . ID ID parameter1

    ID              shift and go to state 226


state 183

    (9) statement_loop1 -> statement statement_loop1 .

    CLOSE_KEY       reduce using rule 9 (statement_loop1 -> statement statement_loop1 .)
    RETURN          reduce using rule 9 (statement_loop1 -> statement statement_loop1 .)


state 184

    (50) assignment -> variable ASSIGN hyper_exp . SEMICOLON

    SEMICOLON       shift and go to state 227


state 185

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1

    CLOSE_PARENTHESIS shift and go to state 228


state 186

    (102) cycle -> FOR ID np_check_existance_for_var . np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (107) np_for_1 -> . epsilon
    (142) epsilon -> .

    ASSIGN          reduce using rule 142 (epsilon -> .)

    np_for_1                       shift and go to state 229
    epsilon                        shift and go to state 230

state 187

    (106) np_check_existance_for_var -> epsilon .

    ASSIGN          reduce using rule 106 (np_check_existance_for_var -> epsilon .)


state 188

    (129) function_call -> ID function_call1 OPEN_PARENTHESIS . function_call2 CLOSE_PARENTHESIS SEMICOLON
    (132) function_call2 -> . hyper_exp_loop
    (133) function_call2 -> . epsilon
    (126) hyper_exp_loop -> . hyper_exp hyper_exp_loop1
    (142) epsilon -> .
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    function_call2                 shift and go to state 231
    hyper_exp_loop                 shift and go to state 232
    epsilon                        shift and go to state 233
    hyper_exp                      shift and go to state 122
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 189

    (130) function_call1 -> DOT ID .
    (16) variable1 -> DOT ID .

    OPEN_PARENTHESIS reduce using rule 130 (function_call1 -> DOT ID .)
    ASSIGN          reduce using rule 16 (variable1 -> DOT ID .)
    MULTIPLICATION  reduce using rule 16 (variable1 -> DOT ID .)
    DIVISION        reduce using rule 16 (variable1 -> DOT ID .)
    PLUS            reduce using rule 16 (variable1 -> DOT ID .)
    MINUS           reduce using rule 16 (variable1 -> DOT ID .)
    GREATER_THAN    reduce using rule 16 (variable1 -> DOT ID .)
    LESS_THAN       reduce using rule 16 (variable1 -> DOT ID .)
    EQUAL_TO        reduce using rule 16 (variable1 -> DOT ID .)
    NOT_EQUAL_TO    reduce using rule 16 (variable1 -> DOT ID .)
    AND             reduce using rule 16 (variable1 -> DOT ID .)
    OR              reduce using rule 16 (variable1 -> DOT ID .)
    COMMA           reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_PARENTHESIS reduce using rule 16 (variable1 -> DOT ID .)
    SEMICOLON       reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_BRACKET   reduce using rule 16 (variable1 -> DOT ID .)
    TO              reduce using rule 16 (variable1 -> DOT ID .)
    OPEN_KEY        reduce using rule 16 (variable1 -> DOT ID .)


state 190

    (15) variable1 -> OPEN_BRACKET hyper_exp . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 234


state 191

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 235
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 192

    (104) cycle -> DO np_do_while_1 OPEN_KEY . statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 236
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 193

    (117) read -> READ OPEN_PARENTHESIS variable_loop . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 237


state 194

    (118) variable_loop -> variable . variable_loop1
    (119) variable_loop1 -> . COMMA variable variable_loop1
    (120) variable_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 239
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    variable_loop1                 shift and go to state 238
    epsilon                        shift and go to state 240

state 195

    (14) variable -> ID . variable1
    (15) variable1 -> . OPEN_BRACKET hyper_exp CLOSE_BRACKET
    (16) variable1 -> . DOT ID
    (17) variable1 -> . epsilon
    (142) epsilon -> .

    OPEN_BRACKET    shift and go to state 151
    DOT             shift and go to state 241
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    variable1                      shift and go to state 148
    epsilon                        shift and go to state 242

state 196

    (121) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 243


state 197

    (122) write_hyper_exp_loop -> hyper_exp . np_add_write_quad write_hyper_exp_loop1
    (125) np_add_write_quad -> . epsilon
    (142) epsilon -> .

    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    np_add_write_quad              shift and go to state 244
    epsilon                        shift and go to state 245

state 198

    (21) class_declaration2 -> class_function class_declaration2 .

    CLASS           reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    VAR             reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    GROUP           reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    OBJ             reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    FUNCTION        reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    MAIN            reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)


state 199

    (134) class_function -> AT_CLASS ID . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    FUNCTION        shift and go to state 246


state 200

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (142) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter                      shift and go to state 247
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 201

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg SEMICOLON

    RETURNS         shift and go to state 248


state 202

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 249


state 203

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp . CLOSE_PARENTHESIS np_remove_open_parenthesis

    CLOSE_PARENTHESIS shift and go to state 250


state 204

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (142) epsilon -> .

    CLASS           reduce using rule 142 (epsilon -> .)
    VAR             reduce using rule 142 (epsilon -> .)
    GROUP           reduce using rule 142 (epsilon -> .)
    OBJ             reduce using rule 142 (epsilon -> .)
    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    np_add_variable                shift and go to state 251
    epsilon                        shift and go to state 116

state 205

    (127) hyper_exp_loop1 -> COMMA hyper_exp . hyper_exp_loop1
    (127) hyper_exp_loop1 -> . COMMA hyper_exp hyper_exp_loop1
    (128) hyper_exp_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 169
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    hyper_exp_loop1                shift and go to state 252
    epsilon                        shift and go to state 170

state 206

    (52) hyper_exp -> super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    TO              reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    OPEN_KEY        reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)


state 207

    (53) hyper_exp1 -> AND . np_add_operator super_exp np_hyper_exp hyper_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 253
    epsilon                        shift and go to state 254

state 208

    (54) hyper_exp1 -> OR . np_add_operator super_exp np_hyper_exp hyper_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 255
    epsilon                        shift and go to state 254

state 209

    (55) hyper_exp1 -> epsilon .

    COMMA           reduce using rule 55 (hyper_exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 55 (hyper_exp1 -> epsilon .)
    SEMICOLON       reduce using rule 55 (hyper_exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 55 (hyper_exp1 -> epsilon .)
    TO              reduce using rule 55 (hyper_exp1 -> epsilon .)
    OPEN_KEY        reduce using rule 55 (hyper_exp1 -> epsilon .)


state 210

    (57) super_exp -> exp np_super_exp super_exp1 .

    AND             reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    OR              reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    TO              reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    OPEN_KEY        reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)


state 211

    (58) super_exp1 -> GREATER_THAN . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 256
    epsilon                        shift and go to state 254

state 212

    (59) super_exp1 -> LESS_THAN . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 257
    epsilon                        shift and go to state 254

state 213

    (60) super_exp1 -> EQUAL_TO . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 258
    epsilon                        shift and go to state 254

state 214

    (61) super_exp1 -> NOT_EQUAL_TO . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 259
    epsilon                        shift and go to state 254

state 215

    (62) super_exp1 -> epsilon .

    AND             reduce using rule 62 (super_exp1 -> epsilon .)
    OR              reduce using rule 62 (super_exp1 -> epsilon .)
    COMMA           reduce using rule 62 (super_exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 62 (super_exp1 -> epsilon .)
    SEMICOLON       reduce using rule 62 (super_exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 62 (super_exp1 -> epsilon .)
    TO              reduce using rule 62 (super_exp1 -> epsilon .)
    OPEN_KEY        reduce using rule 62 (super_exp1 -> epsilon .)


state 216

    (64) exp -> term np_exp exp1 .

    GREATER_THAN    reduce using rule 64 (exp -> term np_exp exp1 .)
    LESS_THAN       reduce using rule 64 (exp -> term np_exp exp1 .)
    EQUAL_TO        reduce using rule 64 (exp -> term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 64 (exp -> term np_exp exp1 .)
    AND             reduce using rule 64 (exp -> term np_exp exp1 .)
    OR              reduce using rule 64 (exp -> term np_exp exp1 .)
    COMMA           reduce using rule 64 (exp -> term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 64 (exp -> term np_exp exp1 .)
    SEMICOLON       reduce using rule 64 (exp -> term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 64 (exp -> term np_exp exp1 .)
    TO              reduce using rule 64 (exp -> term np_exp exp1 .)
    OPEN_KEY        reduce using rule 64 (exp -> term np_exp exp1 .)


state 217

    (65) exp1 -> PLUS . np_add_operator term np_exp exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 260
    epsilon                        shift and go to state 254

state 218

    (66) exp1 -> MINUS . np_add_operator term np_exp exp1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 261
    epsilon                        shift and go to state 254

state 219

    (67) exp1 -> epsilon .

    GREATER_THAN    reduce using rule 67 (exp1 -> epsilon .)
    LESS_THAN       reduce using rule 67 (exp1 -> epsilon .)
    EQUAL_TO        reduce using rule 67 (exp1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 67 (exp1 -> epsilon .)
    AND             reduce using rule 67 (exp1 -> epsilon .)
    OR              reduce using rule 67 (exp1 -> epsilon .)
    COMMA           reduce using rule 67 (exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 67 (exp1 -> epsilon .)
    SEMICOLON       reduce using rule 67 (exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 67 (exp1 -> epsilon .)
    TO              reduce using rule 67 (exp1 -> epsilon .)
    OPEN_KEY        reduce using rule 67 (exp1 -> epsilon .)


state 220

    (69) term -> factor np_term term1 .

    PLUS            reduce using rule 69 (term -> factor np_term term1 .)
    MINUS           reduce using rule 69 (term -> factor np_term term1 .)
    GREATER_THAN    reduce using rule 69 (term -> factor np_term term1 .)
    LESS_THAN       reduce using rule 69 (term -> factor np_term term1 .)
    EQUAL_TO        reduce using rule 69 (term -> factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 69 (term -> factor np_term term1 .)
    AND             reduce using rule 69 (term -> factor np_term term1 .)
    OR              reduce using rule 69 (term -> factor np_term term1 .)
    COMMA           reduce using rule 69 (term -> factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 69 (term -> factor np_term term1 .)
    SEMICOLON       reduce using rule 69 (term -> factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 69 (term -> factor np_term term1 .)
    TO              reduce using rule 69 (term -> factor np_term term1 .)
    OPEN_KEY        reduce using rule 69 (term -> factor np_term term1 .)


state 221

    (70) term1 -> MULTIPLICATION . np_add_operator factor np_term term1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 262
    epsilon                        shift and go to state 254

state 222

    (71) term1 -> DIVISION . np_add_operator factor np_term term1
    (51) np_add_operator -> . epsilon
    (142) epsilon -> .

    FLOAT_VALUE     reduce using rule 142 (epsilon -> .)
    INT_VALUE       reduce using rule 142 (epsilon -> .)
    BOOL_VALUE      reduce using rule 142 (epsilon -> .)
    STRING_VALUE    reduce using rule 142 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)

    np_add_operator                shift and go to state 263
    epsilon                        shift and go to state 254

state 223

    (72) term1 -> epsilon .

    PLUS            reduce using rule 72 (term1 -> epsilon .)
    MINUS           reduce using rule 72 (term1 -> epsilon .)
    GREATER_THAN    reduce using rule 72 (term1 -> epsilon .)
    LESS_THAN       reduce using rule 72 (term1 -> epsilon .)
    EQUAL_TO        reduce using rule 72 (term1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 72 (term1 -> epsilon .)
    AND             reduce using rule 72 (term1 -> epsilon .)
    OR              reduce using rule 72 (term1 -> epsilon .)
    COMMA           reduce using rule 72 (term1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 72 (term1 -> epsilon .)
    SEMICOLON       reduce using rule 72 (term1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 72 (term1 -> epsilon .)
    TO              reduce using rule 72 (term1 -> epsilon .)
    OPEN_KEY        reduce using rule 72 (term1 -> epsilon .)


state 224

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY . variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (142) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    variable_declaration_loop      shift and go to state 264
    variable_declaration           shift and go to state 80
    epsilon                        shift and go to state 81

state 225

    (93) parameter1 -> COMMA atomic_var_type data_type . ID parameter1

    ID              shift and go to state 265


state 226

    (94) parameter1 -> COMMA OBJ ID . ID parameter1

    ID              shift and go to state 266


state 227

    (50) assignment -> variable ASSIGN hyper_exp SEMICOLON .

    IF              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    FOR             reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    WHILE           reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    DO              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    READ            reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    WRITE           reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    ID              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    CLOSE_KEY       reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    RETURN          reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)


state 228

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (99) np_if_1 -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_if_1                        shift and go to state 267
    epsilon                        shift and go to state 268

state 229

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 . ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for

    ASSIGN          shift and go to state 269


state 230

    (107) np_for_1 -> epsilon .

    ASSIGN          reduce using rule 107 (np_for_1 -> epsilon .)


state 231

    (129) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 270


state 232

    (132) function_call2 -> hyper_exp_loop .

    CLOSE_PARENTHESIS reduce using rule 132 (function_call2 -> hyper_exp_loop .)


state 233

    (133) function_call2 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 133 (function_call2 -> epsilon .)


state 234

    (15) variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .

    ASSIGN          reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    MULTIPLICATION  reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    DIVISION        reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    PLUS            reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    MINUS           reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    EQUAL_TO        reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    NOT_EQUAL_TO    reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    AND             reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    OR              reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    COMMA           reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    TO              reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    OPEN_KEY        reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)


state 235

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_while_2 cycle_while

    CLOSE_PARENTHESIS shift and go to state 271


state 236

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop . CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    CLOSE_KEY       shift and go to state 272


state 237

    (117) read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 273


state 238

    (118) variable_loop -> variable variable_loop1 .

    CLOSE_PARENTHESIS reduce using rule 118 (variable_loop -> variable variable_loop1 .)


state 239

    (119) variable_loop1 -> COMMA . variable variable_loop1
    (14) variable -> . ID variable1

    ID              shift and go to state 195

    variable                       shift and go to state 274

state 240

    (120) variable_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 120 (variable_loop1 -> epsilon .)


state 241

    (16) variable1 -> DOT . ID

    ID              shift and go to state 275


state 242

    (17) variable1 -> epsilon .

    COMMA           reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 17 (variable1 -> epsilon .)


state 243

    (121) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 276


state 244

    (122) write_hyper_exp_loop -> hyper_exp np_add_write_quad . write_hyper_exp_loop1
    (123) write_hyper_exp_loop1 -> . COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
    (124) write_hyper_exp_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 278
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    write_hyper_exp_loop1          shift and go to state 277
    epsilon                        shift and go to state 279

state 245

    (125) np_add_write_quad -> epsilon .

    COMMA           reduce using rule 125 (np_add_write_quad -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 125 (np_add_write_quad -> epsilon .)


state 246

    (134) class_function -> AT_CLASS ID FUNCTION . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 280


state 247

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 281


state 248

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg SEMICOLON
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 282
    data_type                      shift and go to state 134

state 249

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (142) epsilon -> .

    CLASS           reduce using rule 142 (epsilon -> .)
    VAR             reduce using rule 142 (epsilon -> .)
    GROUP           reduce using rule 142 (epsilon -> .)
    OBJ             reduce using rule 142 (epsilon -> .)
    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    np_add_variable                shift and go to state 283
    epsilon                        shift and go to state 116

state 250

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS . np_remove_open_parenthesis
    (82) np_remove_open_parenthesis -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  reduce using rule 142 (epsilon -> .)
    DIVISION        reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_remove_open_parenthesis     shift and go to state 284
    epsilon                        shift and go to state 285

state 251

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .

    CLASS           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    VAR             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    GROUP           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    OBJ             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    MAIN            reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    IF              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    FOR             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    WHILE           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    DO              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    READ            reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    WRITE           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    ID              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    RETURN          reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)


state 252

    (127) hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 127 (hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1 .)


state 253

    (53) hyper_exp1 -> AND np_add_operator . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    super_exp                      shift and go to state 286
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 254

    (51) np_add_operator -> epsilon .

    FLOAT_VALUE     reduce using rule 51 (np_add_operator -> epsilon .)
    INT_VALUE       reduce using rule 51 (np_add_operator -> epsilon .)
    BOOL_VALUE      reduce using rule 51 (np_add_operator -> epsilon .)
    STRING_VALUE    reduce using rule 51 (np_add_operator -> epsilon .)
    OPEN_PARENTHESIS reduce using rule 51 (np_add_operator -> epsilon .)
    ID              reduce using rule 51 (np_add_operator -> epsilon .)


state 255

    (54) hyper_exp1 -> OR np_add_operator . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    super_exp                      shift and go to state 287
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 256

    (58) super_exp1 -> GREATER_THAN np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 288
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 257

    (59) super_exp1 -> LESS_THAN np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 289
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 258

    (60) super_exp1 -> EQUAL_TO np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 290
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 259

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 291
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 260

    (65) exp1 -> PLUS np_add_operator . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    term                           shift and go to state 292
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 261

    (66) exp1 -> MINUS np_add_operator . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    term                           shift and go to state 293
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 262

    (70) term1 -> MULTIPLICATION np_add_operator . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    factor                         shift and go to state 294
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 263

    (71) term1 -> DIVISION np_add_operator . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    factor                         shift and go to state 295
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 264

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop . function_statement_loop function_return CLOSE_KEY
    (140) function_statement_loop -> . statement_loop
    (141) function_statement_loop -> . epsilon
    (8) statement_loop -> . statement statement_loop1
    (142) epsilon -> .
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    function_statement_loop        shift and go to state 296
    statement_loop                 shift and go to state 297
    epsilon                        shift and go to state 298
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 265

    (93) parameter1 -> COMMA atomic_var_type data_type ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter1                     shift and go to state 299
    epsilon                        shift and go to state 138

state 266

    (94) parameter1 -> COMMA OBJ ID ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter1                     shift and go to state 300
    epsilon                        shift and go to state 138

state 267

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 . OPEN_KEY statement_loop CLOSE_KEY conditional1

    OPEN_KEY        shift and go to state 301


state 268

    (99) np_if_1 -> epsilon .

    OPEN_KEY        reduce using rule 99 (np_if_1 -> epsilon .)


state 269

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN . hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 302
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 270

    (129) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 303


state 271

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_while_2 cycle_while
    (113) np_while_2 -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_while_2                     shift and go to state 304
    epsilon                        shift and go to state 305

state 272

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY . WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    WHILE           shift and go to state 306


state 273

    (117) read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 117 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)


state 274

    (119) variable_loop1 -> COMMA variable . variable_loop1
    (119) variable_loop1 -> . COMMA variable variable_loop1
    (120) variable_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 239
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    variable_loop1                 shift and go to state 307
    epsilon                        shift and go to state 240

state 275

    (16) variable1 -> DOT ID .

    COMMA           reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_PARENTHESIS reduce using rule 16 (variable1 -> DOT ID .)


state 276

    (121) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 121 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)


state 277

    (122) write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 122 (write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1 .)


state 278

    (123) write_hyper_exp_loop1 -> COMMA . hyper_exp np_add_write_quad write_hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 308
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 279

    (124) write_hyper_exp_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 124 (write_hyper_exp_loop1 -> epsilon .)


state 280

    (134) class_function -> AT_CLASS ID FUNCTION ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 309


state 281

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_KEY statement_loop CLOSE_KEY

    OPEN_KEY        shift and go to state 310


state 282

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . SEMICOLON

    SEMICOLON       shift and go to state 311


state 283

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .

    CLASS           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    VAR             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    GROUP           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    OBJ             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    MAIN            reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    IF              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    FOR             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    WHILE           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    DO              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    READ            reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    WRITE           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    ID              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    RETURN          reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)


state 284

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .

    MULTIPLICATION  reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    DIVISION        reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    PLUS            reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    MINUS           reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    GREATER_THAN    reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    LESS_THAN       reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    EQUAL_TO        reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    NOT_EQUAL_TO    reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    AND             reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    OR              reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    COMMA           reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    CLOSE_PARENTHESIS reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    SEMICOLON       reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    CLOSE_BRACKET   reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    TO              reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    OPEN_KEY        reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)


state 285

    (82) np_remove_open_parenthesis -> epsilon .

    MULTIPLICATION  reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    DIVISION        reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    PLUS            reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    MINUS           reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    GREATER_THAN    reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    LESS_THAN       reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    EQUAL_TO        reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    AND             reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    OR              reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    COMMA           reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    SEMICOLON       reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    CLOSE_BRACKET   reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    TO              reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    OPEN_KEY        reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)


state 286

    (53) hyper_exp1 -> AND np_add_operator super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (142) epsilon -> .

    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_hyper_exp                   shift and go to state 312
    epsilon                        shift and go to state 172

state 287

    (54) hyper_exp1 -> OR np_add_operator super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (142) epsilon -> .

    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_hyper_exp                   shift and go to state 313
    epsilon                        shift and go to state 172

state 288

    (58) super_exp1 -> GREATER_THAN np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_super_exp                   shift and go to state 314
    epsilon                        shift and go to state 174

state 289

    (59) super_exp1 -> LESS_THAN np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_super_exp                   shift and go to state 315
    epsilon                        shift and go to state 174

state 290

    (60) super_exp1 -> EQUAL_TO np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_super_exp                   shift and go to state 316
    epsilon                        shift and go to state 174

state 291

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_super_exp                   shift and go to state 317
    epsilon                        shift and go to state 174

state 292

    (65) exp1 -> PLUS np_add_operator term . np_exp exp1
    (68) np_exp -> . epsilon
    (142) epsilon -> .

    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_exp                         shift and go to state 318
    epsilon                        shift and go to state 176

state 293

    (66) exp1 -> MINUS np_add_operator term . np_exp exp1
    (68) np_exp -> . epsilon
    (142) epsilon -> .

    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_exp                         shift and go to state 319
    epsilon                        shift and go to state 176

state 294

    (70) term1 -> MULTIPLICATION np_add_operator factor . np_term term1
    (73) np_term -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  reduce using rule 142 (epsilon -> .)
    DIVISION        reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_term                        shift and go to state 320
    epsilon                        shift and go to state 178

state 295

    (71) term1 -> DIVISION np_add_operator factor . np_term term1
    (73) np_term -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  reduce using rule 142 (epsilon -> .)
    DIVISION        reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_term                        shift and go to state 321
    epsilon                        shift and go to state 178

state 296

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop . function_return CLOSE_KEY
    (138) function_return -> . RETURN hyper_exp SEMICOLON
    (139) function_return -> . epsilon
    (142) epsilon -> .

    RETURN          shift and go to state 323
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    function_return                shift and go to state 322
    epsilon                        shift and go to state 324

state 297

    (140) function_statement_loop -> statement_loop .

    RETURN          reduce using rule 140 (function_statement_loop -> statement_loop .)
    CLOSE_KEY       reduce using rule 140 (function_statement_loop -> statement_loop .)


state 298

    (141) function_statement_loop -> epsilon .

    RETURN          reduce using rule 141 (function_statement_loop -> epsilon .)
    CLOSE_KEY       reduce using rule 141 (function_statement_loop -> epsilon .)


state 299

    (93) parameter1 -> COMMA atomic_var_type data_type ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 93 (parameter1 -> COMMA atomic_var_type data_type ID parameter1 .)


state 300

    (94) parameter1 -> COMMA OBJ ID ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 94 (parameter1 -> COMMA OBJ ID ID parameter1 .)


state 301

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY . statement_loop CLOSE_KEY conditional1
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 325
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 302

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp . np_for_2 TO hyper_exp np_for_3 cycle_for
    (108) np_for_2 -> . epsilon
    (142) epsilon -> .

    TO              reduce using rule 142 (epsilon -> .)

    np_for_2                       shift and go to state 326
    epsilon                        shift and go to state 327

state 303

    (129) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    MULTIPLICATION  reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    DIVISION        reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    GREATER_THAN    reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    LESS_THAN       reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    EQUAL_TO        reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    NOT_EQUAL_TO    reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    AND             reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    OR              reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    TO              reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_KEY        reduce using rule 129 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)


state 304

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 . cycle_while
    (111) cycle_while -> . OPEN_KEY statement_loop CLOSE_KEY np_while_3

    OPEN_KEY        shift and go to state 329

    cycle_while                    shift and go to state 328

state 305

    (113) np_while_2 -> epsilon .

    OPEN_KEY        reduce using rule 113 (np_while_2 -> epsilon .)


state 306

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    OPEN_PARENTHESIS shift and go to state 330


state 307

    (119) variable_loop1 -> COMMA variable variable_loop1 .

    CLOSE_PARENTHESIS reduce using rule 119 (variable_loop1 -> COMMA variable variable_loop1 .)


state 308

    (123) write_hyper_exp_loop1 -> COMMA hyper_exp . np_add_write_quad write_hyper_exp_loop1
    (125) np_add_write_quad -> . epsilon
    (142) epsilon -> .

    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    np_add_write_quad              shift and go to state 331
    epsilon                        shift and go to state 245

state 309

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (142) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    parameter                      shift and go to state 332
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 310

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY . statement_loop CLOSE_KEY
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 333
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 311

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .

    FUNCTION        reduce using rule 87 (class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .)
    CLOSE_KEY       reduce using rule 87 (class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .)


state 312

    (53) hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (142) epsilon -> .

    AND             shift and go to state 207
    OR              shift and go to state 208
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    hyper_exp1                     shift and go to state 334
    epsilon                        shift and go to state 209

state 313

    (54) hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (142) epsilon -> .

    AND             shift and go to state 207
    OR              shift and go to state 208
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    hyper_exp1                     shift and go to state 335
    epsilon                        shift and go to state 209

state 314

    (58) super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    shift and go to state 211
    LESS_THAN       shift and go to state 212
    EQUAL_TO        shift and go to state 213
    NOT_EQUAL_TO    shift and go to state 214
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    super_exp1                     shift and go to state 336
    epsilon                        shift and go to state 215

state 315

    (59) super_exp1 -> LESS_THAN np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    shift and go to state 211
    LESS_THAN       shift and go to state 212
    EQUAL_TO        shift and go to state 213
    NOT_EQUAL_TO    shift and go to state 214
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    super_exp1                     shift and go to state 337
    epsilon                        shift and go to state 215

state 316

    (60) super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    shift and go to state 211
    LESS_THAN       shift and go to state 212
    EQUAL_TO        shift and go to state 213
    NOT_EQUAL_TO    shift and go to state 214
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    super_exp1                     shift and go to state 338
    epsilon                        shift and go to state 215

state 317

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (142) epsilon -> .

    GREATER_THAN    shift and go to state 211
    LESS_THAN       shift and go to state 212
    EQUAL_TO        shift and go to state 213
    NOT_EQUAL_TO    shift and go to state 214
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    super_exp1                     shift and go to state 339
    epsilon                        shift and go to state 215

state 318

    (65) exp1 -> PLUS np_add_operator term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (142) epsilon -> .

    PLUS            shift and go to state 217
    MINUS           shift and go to state 218
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    exp1                           shift and go to state 340
    epsilon                        shift and go to state 219

state 319

    (66) exp1 -> MINUS np_add_operator term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (142) epsilon -> .

    PLUS            shift and go to state 217
    MINUS           shift and go to state 218
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    exp1                           shift and go to state 341
    epsilon                        shift and go to state 219

state 320

    (70) term1 -> MULTIPLICATION np_add_operator factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  shift and go to state 221
    DIVISION        shift and go to state 222
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    term1                          shift and go to state 342
    epsilon                        shift and go to state 223

state 321

    (71) term1 -> DIVISION np_add_operator factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (142) epsilon -> .

    MULTIPLICATION  shift and go to state 221
    DIVISION        shift and go to state 222
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    GREATER_THAN    reduce using rule 142 (epsilon -> .)
    LESS_THAN       reduce using rule 142 (epsilon -> .)
    EQUAL_TO        reduce using rule 142 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    term1                          shift and go to state 343
    epsilon                        shift and go to state 223

state 322

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return . CLOSE_KEY

    CLOSE_KEY       shift and go to state 344


state 323

    (138) function_return -> RETURN . hyper_exp SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 345
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 324

    (139) function_return -> epsilon .

    CLOSE_KEY       reduce using rule 139 (function_return -> epsilon .)


state 325

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop . CLOSE_KEY conditional1

    CLOSE_KEY       shift and go to state 346


state 326

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 . TO hyper_exp np_for_3 cycle_for

    TO              shift and go to state 347


state 327

    (108) np_for_2 -> epsilon .

    TO              reduce using rule 108 (np_for_2 -> epsilon .)


state 328

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .

    IF              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    FOR             reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    WHILE           reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    DO              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    READ            reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    WRITE           reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    ID              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    CLOSE_KEY       reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)
    RETURN          reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while .)


state 329

    (111) cycle_while -> OPEN_KEY . statement_loop CLOSE_KEY np_while_3
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 348
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 330

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 349
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 331

    (123) write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad . write_hyper_exp_loop1
    (123) write_hyper_exp_loop1 -> . COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
    (124) write_hyper_exp_loop1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 278
    CLOSE_PARENTHESIS reduce using rule 142 (epsilon -> .)

    write_hyper_exp_loop1          shift and go to state 350
    epsilon                        shift and go to state 279

state 332

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 351


state 333

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop . CLOSE_KEY

    CLOSE_KEY       shift and go to state 352


state 334

    (53) hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    TO              reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    OPEN_KEY        reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)


state 335

    (54) hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    TO              reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    OPEN_KEY        reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)


state 336

    (58) super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    TO              reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    OPEN_KEY        reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)


state 337

    (59) super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    TO              reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    OPEN_KEY        reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)


state 338

    (60) super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    TO              reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OPEN_KEY        reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)


state 339

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    TO              reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OPEN_KEY        reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)


state 340

    (65) exp1 -> PLUS np_add_operator term np_exp exp1 .

    GREATER_THAN    reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    LESS_THAN       reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    EQUAL_TO        reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    AND             reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    OR              reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    COMMA           reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    SEMICOLON       reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    TO              reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    OPEN_KEY        reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)


state 341

    (66) exp1 -> MINUS np_add_operator term np_exp exp1 .

    GREATER_THAN    reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    LESS_THAN       reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    EQUAL_TO        reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    AND             reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    OR              reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    COMMA           reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    SEMICOLON       reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    TO              reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    OPEN_KEY        reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)


state 342

    (70) term1 -> MULTIPLICATION np_add_operator factor np_term term1 .

    PLUS            reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    MINUS           reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    GREATER_THAN    reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    LESS_THAN       reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    EQUAL_TO        reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    AND             reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    OR              reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    COMMA           reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    SEMICOLON       reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    TO              reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    OPEN_KEY        reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)


state 343

    (71) term1 -> DIVISION np_add_operator factor np_term term1 .

    PLUS            reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    MINUS           reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    GREATER_THAN    reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    LESS_THAN       reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    EQUAL_TO        reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    AND             reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    OR              reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    COMMA           reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    SEMICOLON       reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    TO              reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    OPEN_KEY        reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)


state 344

    (135) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .

    CLASS           reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    VAR             reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    GROUP           reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    OBJ             reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    FUNCTION        reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    MAIN            reduce using rule 135 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)


state 345

    (138) function_return -> RETURN hyper_exp . SEMICOLON

    SEMICOLON       shift and go to state 353


state 346

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY . conditional1
    (97) conditional1 -> . ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
    (98) conditional1 -> . np_if_2
    (100) np_if_2 -> . epsilon
    (142) epsilon -> .

    ELSE            shift and go to state 355
    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)

    conditional1                   shift and go to state 354
    np_if_2                        shift and go to state 356
    epsilon                        shift and go to state 357

state 347

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO . hyper_exp np_for_3 cycle_for
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 358
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 348

    (111) cycle_while -> OPEN_KEY statement_loop . CLOSE_KEY np_while_3

    CLOSE_KEY       shift and go to state 359


state 349

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 360


state 350

    (123) write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 123 (write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1 .)


state 351

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    RETURNS         shift and go to state 361


state 352

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .

    AT_CLASS        reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    CLASS           reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    VAR             reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    GROUP           reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    OBJ             reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    FUNCTION        reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    MAIN            reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)


state 353

    (138) function_return -> RETURN hyper_exp SEMICOLON .

    CLOSE_KEY       reduce using rule 138 (function_return -> RETURN hyper_exp SEMICOLON .)


state 354

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .

    IF              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    FOR             reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    WHILE           reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    DO              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    READ            reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    WRITE           reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    ID              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    CLOSE_KEY       reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    RETURN          reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)


state 355

    (97) conditional1 -> ELSE . np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
    (101) np_if_3 -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_if_3                        shift and go to state 362
    epsilon                        shift and go to state 363

state 356

    (98) conditional1 -> np_if_2 .

    IF              reduce using rule 98 (conditional1 -> np_if_2 .)
    FOR             reduce using rule 98 (conditional1 -> np_if_2 .)
    WHILE           reduce using rule 98 (conditional1 -> np_if_2 .)
    DO              reduce using rule 98 (conditional1 -> np_if_2 .)
    READ            reduce using rule 98 (conditional1 -> np_if_2 .)
    WRITE           reduce using rule 98 (conditional1 -> np_if_2 .)
    ID              reduce using rule 98 (conditional1 -> np_if_2 .)
    CLOSE_KEY       reduce using rule 98 (conditional1 -> np_if_2 .)
    RETURN          reduce using rule 98 (conditional1 -> np_if_2 .)


state 357

    (100) np_if_2 -> epsilon .

    IF              reduce using rule 100 (np_if_2 -> epsilon .)
    FOR             reduce using rule 100 (np_if_2 -> epsilon .)
    WHILE           reduce using rule 100 (np_if_2 -> epsilon .)
    DO              reduce using rule 100 (np_if_2 -> epsilon .)
    READ            reduce using rule 100 (np_if_2 -> epsilon .)
    WRITE           reduce using rule 100 (np_if_2 -> epsilon .)
    ID              reduce using rule 100 (np_if_2 -> epsilon .)
    CLOSE_KEY       reduce using rule 100 (np_if_2 -> epsilon .)
    RETURN          reduce using rule 100 (np_if_2 -> epsilon .)


state 358

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp . np_for_3 cycle_for
    (109) np_for_3 -> . epsilon
    (142) epsilon -> .

    OPEN_KEY        reduce using rule 142 (epsilon -> .)

    np_for_3                       shift and go to state 364
    epsilon                        shift and go to state 365

state 359

    (111) cycle_while -> OPEN_KEY statement_loop CLOSE_KEY . np_while_3
    (114) np_while_3 -> . epsilon
    (142) epsilon -> .

    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)

    np_while_3                     shift and go to state 366
    epsilon                        shift and go to state 367

state 360

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_do_while_2 SEMICOLON
    (116) np_do_while_2 -> . epsilon
    (142) epsilon -> .

    SEMICOLON       reduce using rule 142 (epsilon -> .)

    np_do_while_2                  shift and go to state 368
    epsilon                        shift and go to state 369

state 361

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 370
    data_type                      shift and go to state 134

state 362

    (97) conditional1 -> ELSE np_if_3 . OPEN_KEY statement_loop CLOSE_KEY np_if_2

    OPEN_KEY        shift and go to state 371


state 363

    (101) np_if_3 -> epsilon .

    OPEN_KEY        reduce using rule 101 (np_if_3 -> epsilon .)


state 364

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 . cycle_for
    (105) cycle_for -> . OPEN_KEY statement_loop CLOSE_KEY np_for_4

    OPEN_KEY        shift and go to state 373

    cycle_for                      shift and go to state 372

state 365

    (109) np_for_3 -> epsilon .

    OPEN_KEY        reduce using rule 109 (np_for_3 -> epsilon .)


state 366

    (111) cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .

    IF              reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    FOR             reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    WHILE           reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    DO              reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    READ            reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    WRITE           reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    ID              reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    CLOSE_KEY       reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    RETURN          reduce using rule 111 (cycle_while -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)


state 367

    (114) np_while_3 -> epsilon .

    IF              reduce using rule 114 (np_while_3 -> epsilon .)
    FOR             reduce using rule 114 (np_while_3 -> epsilon .)
    WHILE           reduce using rule 114 (np_while_3 -> epsilon .)
    DO              reduce using rule 114 (np_while_3 -> epsilon .)
    READ            reduce using rule 114 (np_while_3 -> epsilon .)
    WRITE           reduce using rule 114 (np_while_3 -> epsilon .)
    ID              reduce using rule 114 (np_while_3 -> epsilon .)
    CLOSE_KEY       reduce using rule 114 (np_while_3 -> epsilon .)
    RETURN          reduce using rule 114 (np_while_3 -> epsilon .)


state 368

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 . SEMICOLON

    SEMICOLON       shift and go to state 374


state 369

    (116) np_do_while_2 -> epsilon .

    SEMICOLON       reduce using rule 116 (np_do_while_2 -> epsilon .)


state 370

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . OPEN_KEY function_statement_loop function_return CLOSE_KEY

    OPEN_KEY        shift and go to state 375


state 371

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY . statement_loop CLOSE_KEY np_if_2
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 376
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 372

    (102) cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .

    IF              reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    FOR             reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    WHILE           reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    DO              reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    READ            reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    WRITE           reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    ID              reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    CLOSE_KEY       reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)
    RETURN          reduce using rule 102 (cycle -> FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for .)


state 373

    (105) cycle_for -> OPEN_KEY . statement_loop CLOSE_KEY np_for_4
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 377
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 374

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .

    IF              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    FOR             reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    WHILE           reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    DO              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    READ            reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    WRITE           reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    ID              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    CLOSE_KEY       reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    RETURN          reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)


state 375

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY . function_statement_loop function_return CLOSE_KEY
    (140) function_statement_loop -> . statement_loop
    (141) function_statement_loop -> . epsilon
    (8) statement_loop -> . statement statement_loop1
    (142) epsilon -> .
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR ID np_check_existance_for_var np_for_1 ASSIGN hyper_exp np_for_2 TO hyper_exp np_for_3 cycle_for
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle_while
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (117) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (121) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (129) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    RETURN          reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    function_statement_loop        shift and go to state 378
    statement_loop                 shift and go to state 297
    epsilon                        shift and go to state 298
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 376

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop . CLOSE_KEY np_if_2

    CLOSE_KEY       shift and go to state 379


state 377

    (105) cycle_for -> OPEN_KEY statement_loop . CLOSE_KEY np_for_4

    CLOSE_KEY       shift and go to state 380


state 378

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop . function_return CLOSE_KEY
    (138) function_return -> . RETURN hyper_exp SEMICOLON
    (139) function_return -> . epsilon
    (142) epsilon -> .

    RETURN          shift and go to state 323
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)

    function_return                shift and go to state 381
    epsilon                        shift and go to state 324

state 379

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY . np_if_2
    (100) np_if_2 -> . epsilon
    (142) epsilon -> .

    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)

    np_if_2                        shift and go to state 382
    epsilon                        shift and go to state 357

state 380

    (105) cycle_for -> OPEN_KEY statement_loop CLOSE_KEY . np_for_4
    (110) np_for_4 -> . epsilon
    (142) epsilon -> .

    IF              reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    CLOSE_KEY       reduce using rule 142 (epsilon -> .)
    RETURN          reduce using rule 142 (epsilon -> .)

    np_for_4                       shift and go to state 383
    epsilon                        shift and go to state 384

state 381

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return . CLOSE_KEY

    CLOSE_KEY       shift and go to state 385


state 382

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .

    IF              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    FOR             reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    WHILE           reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    DO              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    READ            reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    WRITE           reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    ID              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    CLOSE_KEY       reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    RETURN          reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)


state 383

    (105) cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .

    IF              reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    FOR             reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    WHILE           reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    DO              reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    READ            reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    WRITE           reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    ID              reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    CLOSE_KEY       reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)
    RETURN          reduce using rule 105 (cycle_for -> OPEN_KEY statement_loop CLOSE_KEY np_for_4 .)


state 384

    (110) np_for_4 -> epsilon .

    IF              reduce using rule 110 (np_for_4 -> epsilon .)
    FOR             reduce using rule 110 (np_for_4 -> epsilon .)
    WHILE           reduce using rule 110 (np_for_4 -> epsilon .)
    DO              reduce using rule 110 (np_for_4 -> epsilon .)
    READ            reduce using rule 110 (np_for_4 -> epsilon .)
    WRITE           reduce using rule 110 (np_for_4 -> epsilon .)
    ID              reduce using rule 110 (np_for_4 -> epsilon .)
    CLOSE_KEY       reduce using rule 110 (np_for_4 -> epsilon .)
    RETURN          reduce using rule 110 (np_for_4 -> epsilon .)


state 385

    (134) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .

    AT_CLASS        reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    CLASS           reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    VAR             reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    GROUP           reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    OBJ             reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    FUNCTION        reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    MAIN            reduce using rule 134 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)

