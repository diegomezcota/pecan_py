Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function
Rule 2     main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY
Rule 3     np_add_main_internal_scope -> epsilon
Rule 4     np_start_state -> epsilon
Rule 5     np_start_func_dir -> epsilon
Rule 6     declaration_loop -> declaration declaration_loop
Rule 7     declaration_loop -> epsilon
Rule 8     statement_loop -> statement statement_loop1
Rule 9     statement_loop1 -> statement statement_loop1
Rule 10    statement_loop1 -> epsilon
Rule 11    declaration -> class_declaration
Rule 12    declaration -> variable_declaration
Rule 13    declaration -> function_declaration
Rule 14    variable -> ID variable1
Rule 15    variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET
Rule 16    variable1 -> DOT ID
Rule 17    variable1 -> epsilon
Rule 18    class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
Rule 19    class_declaration1 -> IS ID
Rule 20    class_declaration1 -> epsilon
Rule 21    class_declaration2 -> class_function class_declaration2
Rule 22    class_declaration2 -> epsilon
Rule 23    class_body -> class_body1 class_body3
Rule 24    class_body1 -> variable_declaration class_body2
Rule 25    class_body2 -> variable_declaration class_body2
Rule 26    class_body2 -> epsilon
Rule 27    class_body3 -> class_function_declaration class_body4
Rule 28    class_body4 -> class_function_declaration class_body4
Rule 29    class_body4 -> epsilon
Rule 30    constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY
Rule 31    variable_declaration_loop -> variable_declaration variable_declaration_loop
Rule 32    variable_declaration_loop -> epsilon
Rule 33    variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
Rule 34    variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
Rule 35    variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
Rule 36    np_set_current_var_type -> epsilon
Rule 37    np_set_current_var_data_type -> epsilon
Rule 38    np_set_current_var_name -> epsilon
Rule 39    atomic_var_type -> VAR
Rule 40    atomic_var_type -> GROUP
Rule 41    np_add_variable -> epsilon
Rule 42    variable_declaration1 -> hyper_exp_loop
Rule 43    variable_declaration1 -> epsilon
Rule 44    statement -> assignment
Rule 45    statement -> conditional
Rule 46    statement -> cycle
Rule 47    statement -> read
Rule 48    statement -> write
Rule 49    statement -> function_call
Rule 50    assignment -> variable ASSIGN hyper_exp SEMICOLON
Rule 51    np_add_operator -> epsilon
Rule 52    hyper_exp -> super_exp np_hyper_exp hyper_exp1
Rule 53    hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1
Rule 54    hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1
Rule 55    hyper_exp1 -> epsilon
Rule 56    np_hyper_exp -> epsilon
Rule 57    super_exp -> exp np_super_exp super_exp1
Rule 58    super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1
Rule 59    super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1
Rule 60    super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1
Rule 61    super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
Rule 62    super_exp1 -> epsilon
Rule 63    np_super_exp -> epsilon
Rule 64    exp -> term np_exp exp1
Rule 65    exp1 -> PLUS np_add_operator term np_exp exp1
Rule 66    exp1 -> MINUS np_add_operator term np_exp exp1
Rule 67    exp1 -> epsilon
Rule 68    np_exp -> epsilon
Rule 69    term -> factor np_term term1
Rule 70    term1 -> MULTIPLICATION np_add_operator factor np_term term1
Rule 71    term1 -> DIVISION np_add_operator factor np_term term1
Rule 72    term1 -> epsilon
Rule 73    np_term -> epsilon
Rule 74    factor -> function_call
Rule 75    factor -> FLOAT_VALUE
Rule 76    factor -> INT_VALUE
Rule 77    factor -> BOOL_VALUE
Rule 78    factor -> STRING_VALUE
Rule 79    factor -> variable
Rule 80    factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
Rule 81    np_add_open_parenthesis -> epsilon
Rule 82    np_remove_open_parenthesis -> epsilon
Rule 83    data_type -> INT
Rule 84    data_type -> FLOAT
Rule 85    data_type -> STRING
Rule 86    data_type -> BOOL
Rule 87    class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
Rule 88    return_arg -> data_type
Rule 89    return_arg -> VOID
Rule 90    parameter -> atomic_var_type data_type ID parameter1
Rule 91    parameter -> OBJ ID ID parameter1
Rule 92    parameter -> epsilon
Rule 93    parameter1 -> COMMA atomic_var_type data_type ID parameter1
Rule 94    parameter1 -> COMMA OBJ ID ID parameter1
Rule 95    parameter1 -> epsilon
Rule 96    conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
Rule 97    conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
Rule 98    conditional1 -> np_if_2
Rule 99    np_if_1 -> epsilon
Rule 100   np_if_2 -> epsilon
Rule 101   np_if_3 -> epsilon
Rule 102   cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
Rule 103   cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
Rule 104   cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
Rule 105   cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3
Rule 106   np_while_1 -> epsilon
Rule 107   np_while_2 -> epsilon
Rule 108   np_while_3 -> epsilon
Rule 109   np_do_while_1 -> epsilon
Rule 110   np_do_while_2 -> epsilon
Rule 111   read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
Rule 112   variable_loop -> variable variable_loop1
Rule 113   variable_loop1 -> COMMA variable variable_loop1
Rule 114   variable_loop1 -> epsilon
Rule 115   write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
Rule 116   write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1
Rule 117   write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
Rule 118   write_hyper_exp_loop1 -> epsilon
Rule 119   np_add_write_quad -> epsilon
Rule 120   hyper_exp_loop -> hyper_exp hyper_exp_loop1
Rule 121   hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1
Rule 122   hyper_exp_loop1 -> epsilon
Rule 123   function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
Rule 124   function_call1 -> DOT ID
Rule 125   function_call1 -> epsilon
Rule 126   function_call2 -> hyper_exp_loop
Rule 127   function_call2 -> epsilon
Rule 128   class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
Rule 129   function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
Rule 130   np_add_function_internal_scope -> epsilon
Rule 131   np_set_function_return_type -> epsilon
Rule 132   function_return -> RETURN hyper_exp SEMICOLON
Rule 133   function_return -> epsilon
Rule 134   function_statement_loop -> statement_loop
Rule 135   function_statement_loop -> epsilon
Rule 136   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 53
ASSIGN               : 34 35 50
AT_CLASS             : 128
BOOL                 : 86
BOOL_VALUE           : 77
CLASS                : 18
CLOSE_BRACKET        : 15 34
CLOSE_KEY            : 2 18 30 96 97 104 105 128 129
CLOSE_PARENTHESIS    : 2 30 35 80 87 96 102 103 104 111 115 123 128 129
COMMA                : 93 94 113 117 121
CONSTRUCTOR          : 30
DIVISION             : 71
DO                   : 104
DOT                  : 16 124
ELSE                 : 97
EQUAL_TO             : 60
FLOAT                : 84
FLOAT_VALUE          : 75
FOR                  : 102
FUNCTION             : 87 128 129
GREATER_THAN         : 58
GROUP                : 34 40
ID                   : 1 14 16 18 19 30 33 34 35 35 87 90 91 91 93 94 94 102 102 123 124 128 128 129
IF                   : 96
IN                   : 102
INT                  : 83
INT_VALUE            : 34 76
IS                   : 19
LESS_THAN            : 59
MAIN                 : 2
MINUS                : 66
MULTIPLICATION       : 70
NOT_EQUAL_TO         : 61
OBJ                  : 35 91 94
OPEN_BRACKET         : 15 34
OPEN_KEY             : 2 18 30 96 97 104 105 128 129
OPEN_PARENTHESIS     : 2 30 35 80 87 96 102 103 104 111 115 123 128 129
OR                   : 54
PLUS                 : 65
PROGRAM              : 1
READ                 : 111
RETURN               : 132
RETURNS              : 87 128 129
SEMICOLON            : 1 18 33 34 35 50 87 104 111 115 123 132
STRING               : 85
STRING_VALUE         : 78
VAR                  : 33 39
VOID                 : 89
WHILE                : 103 104
WRITE                : 115
error                : 

Nonterminals, with rules where they appear

assignment           : 44
atomic_var_type      : 90 93
class_body           : 18
class_body1          : 23
class_body2          : 24 25
class_body3          : 23
class_body4          : 27 28
class_declaration    : 11
class_declaration1   : 18
class_declaration2   : 18 21
class_function       : 21
class_function_declaration : 27 28
conditional          : 45
conditional1         : 96
constructor          : 18
cycle                : 46
cycle1               : 102 103
data_type            : 33 34 88 90 93
declaration          : 6
declaration_loop     : 1 6
epsilon              : 3 4 5 7 10 17 20 22 26 29 32 36 37 38 41 43 51 55 56 62 63 67 68 72 73 81 82 92 95 99 100 101 106 107 108 109 110 114 118 119 122 125 127 130 131 133 135
exp                  : 57 58 59 60 61
exp1                 : 64 65 66
factor               : 69 70 71
function_call        : 49 74
function_call1       : 123
function_call2       : 123
function_declaration : 13
function_return      : 128 129
function_statement_loop : 128 129
hyper_exp            : 15 50 80 96 103 104 116 117 120 121 132
hyper_exp1           : 52 53 54
hyper_exp_loop       : 42 126
hyper_exp_loop1      : 120 121
main_function        : 1
np_add_function_internal_scope : 129
np_add_main_internal_scope : 2
np_add_open_parenthesis : 80
np_add_operator      : 53 54 58 59 60 61 65 66 70 71
np_add_variable      : 33 34 35
np_add_write_quad    : 116 117
np_do_while_1        : 104
np_do_while_2        : 104
np_exp               : 64 65 66
np_hyper_exp         : 52 53 54
np_if_1              : 96
np_if_2              : 97 98
np_if_3              : 97
np_remove_open_parenthesis : 80
np_set_current_var_data_type : 33 34
np_set_current_var_name : 33 34 35
np_set_current_var_type : 33 34 35
np_set_function_return_type : 129
np_start_func_dir    : 1
np_start_state       : 1
np_super_exp         : 57 58 59 60 61
np_term              : 69 70 71
np_while_1           : 103
np_while_2           : 103
np_while_3           : 105
parameter            : 30 87 128 129
parameter1           : 90 91 93 94
program              : 0
read                 : 47
return_arg           : 87 128 129
statement            : 8 9
statement_loop       : 2 30 96 97 104 105 134
statement_loop1      : 8 9
super_exp            : 52 53 54
super_exp1           : 57 58 59 60 61
term                 : 64 65 66
term1                : 69 70 71
variable             : 50 79 112 113
variable1            : 14
variable_declaration : 12 24 25 31
variable_declaration1 : 35
variable_declaration_loop : 2 31 129
variable_loop        : 111
variable_loop1       : 112 113
write                : 48
write_hyper_exp_loop : 115
write_hyper_exp_loop1 : 116 117

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function
    (4) np_start_state -> . epsilon
    (136) epsilon -> .

    ID              reduce using rule 136 (epsilon -> .)

    np_start_state                 shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) program -> PROGRAM np_start_state . np_start_func_dir ID SEMICOLON declaration_loop main_function
    (5) np_start_func_dir -> . epsilon
    (136) epsilon -> .

    ID              reduce using rule 136 (epsilon -> .)

    np_start_func_dir              shift and go to state 5
    epsilon                        shift and go to state 6

state 4

    (4) np_start_state -> epsilon .

    ID              reduce using rule 4 (np_start_state -> epsilon .)


state 5

    (1) program -> PROGRAM np_start_state np_start_func_dir . ID SEMICOLON declaration_loop main_function

    ID              shift and go to state 7


state 6

    (5) np_start_func_dir -> epsilon .

    ID              reduce using rule 5 (np_start_func_dir -> epsilon .)


state 7

    (1) program -> PROGRAM np_start_state np_start_func_dir ID . SEMICOLON declaration_loop main_function

    SEMICOLON       shift and go to state 8


state 8

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON . declaration_loop main_function
    (6) declaration_loop -> . declaration declaration_loop
    (7) declaration_loop -> . epsilon
    (11) declaration -> . class_declaration
    (12) declaration -> . variable_declaration
    (13) declaration -> . function_declaration
    (136) epsilon -> .
    (18) class_declaration -> . CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (129) function_declaration -> . FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    MAIN            reduce using rule 136 (epsilon -> .)
    CLASS           shift and go to state 15
    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        shift and go to state 19

    declaration_loop               shift and go to state 9
    declaration                    shift and go to state 10
    epsilon                        shift and go to state 11
    class_declaration              shift and go to state 12
    variable_declaration           shift and go to state 13
    function_declaration           shift and go to state 14

state 9

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop . main_function
    (2) main_function -> . MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    MAIN            shift and go to state 21

    main_function                  shift and go to state 20

state 10

    (6) declaration_loop -> declaration . declaration_loop
    (6) declaration_loop -> . declaration declaration_loop
    (7) declaration_loop -> . epsilon
    (11) declaration -> . class_declaration
    (12) declaration -> . variable_declaration
    (13) declaration -> . function_declaration
    (136) epsilon -> .
    (18) class_declaration -> . CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (129) function_declaration -> . FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    MAIN            reduce using rule 136 (epsilon -> .)
    CLASS           shift and go to state 15
    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        shift and go to state 19

    declaration                    shift and go to state 10
    declaration_loop               shift and go to state 22
    epsilon                        shift and go to state 11
    class_declaration              shift and go to state 12
    variable_declaration           shift and go to state 13
    function_declaration           shift and go to state 14

state 11

    (7) declaration_loop -> epsilon .

    MAIN            reduce using rule 7 (declaration_loop -> epsilon .)


state 12

    (11) declaration -> class_declaration .

    CLASS           reduce using rule 11 (declaration -> class_declaration .)
    VAR             reduce using rule 11 (declaration -> class_declaration .)
    GROUP           reduce using rule 11 (declaration -> class_declaration .)
    OBJ             reduce using rule 11 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 11 (declaration -> class_declaration .)
    MAIN            reduce using rule 11 (declaration -> class_declaration .)


state 13

    (12) declaration -> variable_declaration .

    CLASS           reduce using rule 12 (declaration -> variable_declaration .)
    VAR             reduce using rule 12 (declaration -> variable_declaration .)
    GROUP           reduce using rule 12 (declaration -> variable_declaration .)
    OBJ             reduce using rule 12 (declaration -> variable_declaration .)
    FUNCTION        reduce using rule 12 (declaration -> variable_declaration .)
    MAIN            reduce using rule 12 (declaration -> variable_declaration .)


state 14

    (13) declaration -> function_declaration .

    CLASS           reduce using rule 13 (declaration -> function_declaration .)
    VAR             reduce using rule 13 (declaration -> function_declaration .)
    GROUP           reduce using rule 13 (declaration -> function_declaration .)
    OBJ             reduce using rule 13 (declaration -> function_declaration .)
    FUNCTION        reduce using rule 13 (declaration -> function_declaration .)
    MAIN            reduce using rule 13 (declaration -> function_declaration .)


state 15

    (18) class_declaration -> CLASS . ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2

    ID              shift and go to state 23


state 16

    (33) variable_declaration -> VAR . np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (136) epsilon -> .

    INT             reduce using rule 136 (epsilon -> .)
    FLOAT           reduce using rule 136 (epsilon -> .)
    STRING          reduce using rule 136 (epsilon -> .)
    BOOL            reduce using rule 136 (epsilon -> .)

    np_set_current_var_type        shift and go to state 24
    epsilon                        shift and go to state 25

state 17

    (34) variable_declaration -> GROUP . np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (136) epsilon -> .

    ID              reduce using rule 136 (epsilon -> .)

    np_set_current_var_type        shift and go to state 26
    epsilon                        shift and go to state 25

state 18

    (35) variable_declaration -> OBJ . np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (36) np_set_current_var_type -> . epsilon
    (136) epsilon -> .

    ID              reduce using rule 136 (epsilon -> .)

    np_set_current_var_type        shift and go to state 27
    epsilon                        shift and go to state 25

state 19

    (129) function_declaration -> FUNCTION . ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 28


state 20

    (1) program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function .

    $end            reduce using rule 1 (program -> PROGRAM np_start_state np_start_func_dir ID SEMICOLON declaration_loop main_function .)


state 21

    (2) main_function -> MAIN . np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY
    (3) np_add_main_internal_scope -> . epsilon
    (136) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)

    np_add_main_internal_scope     shift and go to state 29
    epsilon                        shift and go to state 30

state 22

    (6) declaration_loop -> declaration declaration_loop .

    MAIN            reduce using rule 6 (declaration_loop -> declaration declaration_loop .)


state 23

    (18) class_declaration -> CLASS ID . class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (19) class_declaration1 -> . IS ID
    (20) class_declaration1 -> . epsilon
    (136) epsilon -> .

    IS              shift and go to state 32
    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    class_declaration1             shift and go to state 31
    epsilon                        shift and go to state 33

state 24

    (33) variable_declaration -> VAR np_set_current_var_type . data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 34

state 25

    (36) np_set_current_var_type -> epsilon .

    INT             reduce using rule 36 (np_set_current_var_type -> epsilon .)
    FLOAT           reduce using rule 36 (np_set_current_var_type -> epsilon .)
    STRING          reduce using rule 36 (np_set_current_var_type -> epsilon .)
    BOOL            reduce using rule 36 (np_set_current_var_type -> epsilon .)
    ID              reduce using rule 36 (np_set_current_var_type -> epsilon .)


state 26

    (34) variable_declaration -> GROUP np_set_current_var_type . ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    ID              shift and go to state 39


state 27

    (35) variable_declaration -> OBJ np_set_current_var_type . ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ID              shift and go to state 40


state 28

    (129) function_declaration -> FUNCTION ID . np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (130) np_add_function_internal_scope -> . epsilon
    (136) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)

    np_add_function_internal_scope shift and go to state 41
    epsilon                        shift and go to state 42

state 29

    (2) main_function -> MAIN np_add_main_internal_scope . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 43


state 30

    (3) np_add_main_internal_scope -> epsilon .

    OPEN_PARENTHESIS reduce using rule 3 (np_add_main_internal_scope -> epsilon .)


state 31

    (18) class_declaration -> CLASS ID class_declaration1 . OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2

    OPEN_KEY        shift and go to state 44


state 32

    (19) class_declaration1 -> IS . ID

    ID              shift and go to state 45


state 33

    (20) class_declaration1 -> epsilon .

    OPEN_KEY        reduce using rule 20 (class_declaration1 -> epsilon .)


state 34

    (33) variable_declaration -> VAR np_set_current_var_type data_type . np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (37) np_set_current_var_data_type -> . epsilon
    (136) epsilon -> .

    ID              reduce using rule 136 (epsilon -> .)

    np_set_current_var_data_type   shift and go to state 46
    epsilon                        shift and go to state 47

state 35

    (83) data_type -> INT .

    ID              reduce using rule 83 (data_type -> INT .)
    OPEN_BRACKET    reduce using rule 83 (data_type -> INT .)
    OPEN_KEY        reduce using rule 83 (data_type -> INT .)
    SEMICOLON       reduce using rule 83 (data_type -> INT .)


state 36

    (84) data_type -> FLOAT .

    ID              reduce using rule 84 (data_type -> FLOAT .)
    OPEN_BRACKET    reduce using rule 84 (data_type -> FLOAT .)
    OPEN_KEY        reduce using rule 84 (data_type -> FLOAT .)
    SEMICOLON       reduce using rule 84 (data_type -> FLOAT .)


state 37

    (85) data_type -> STRING .

    ID              reduce using rule 85 (data_type -> STRING .)
    OPEN_BRACKET    reduce using rule 85 (data_type -> STRING .)
    OPEN_KEY        reduce using rule 85 (data_type -> STRING .)
    SEMICOLON       reduce using rule 85 (data_type -> STRING .)


state 38

    (86) data_type -> BOOL .

    ID              reduce using rule 86 (data_type -> BOOL .)
    OPEN_BRACKET    reduce using rule 86 (data_type -> BOOL .)
    OPEN_KEY        reduce using rule 86 (data_type -> BOOL .)
    SEMICOLON       reduce using rule 86 (data_type -> BOOL .)


state 39

    (34) variable_declaration -> GROUP np_set_current_var_type ID . np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (136) epsilon -> .

    ASSIGN          reduce using rule 136 (epsilon -> .)

    np_set_current_var_name        shift and go to state 48
    epsilon                        shift and go to state 49

state 40

    (35) variable_declaration -> OBJ np_set_current_var_type ID . np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (136) epsilon -> .

    ASSIGN          reduce using rule 136 (epsilon -> .)

    np_set_current_var_name        shift and go to state 50
    epsilon                        shift and go to state 49

state 41

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 51


state 42

    (130) np_add_function_internal_scope -> epsilon .

    OPEN_PARENTHESIS reduce using rule 130 (np_add_function_internal_scope -> epsilon .)


state 43

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 52


state 44

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY . class_body CLOSE_KEY SEMICOLON constructor class_declaration2
    (23) class_body -> . class_body1 class_body3
    (24) class_body1 -> . variable_declaration class_body2
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18

    class_body                     shift and go to state 53
    class_body1                    shift and go to state 54
    variable_declaration           shift and go to state 55

state 45

    (19) class_declaration1 -> IS ID .

    OPEN_KEY        reduce using rule 19 (class_declaration1 -> IS ID .)


state 46

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type . ID np_set_current_var_name SEMICOLON np_add_variable

    ID              shift and go to state 56


state 47

    (37) np_set_current_var_data_type -> epsilon .

    ID              reduce using rule 37 (np_set_current_var_data_type -> epsilon .)
    OPEN_BRACKET    reduce using rule 37 (np_set_current_var_data_type -> epsilon .)


state 48

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name . ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    ASSIGN          shift and go to state 57


state 49

    (38) np_set_current_var_name -> epsilon .

    ASSIGN          reduce using rule 38 (np_set_current_var_name -> epsilon .)
    SEMICOLON       reduce using rule 38 (np_set_current_var_name -> epsilon .)


state 50

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name . ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ASSIGN          shift and go to state 58


state 51

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (136) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter                      shift and go to state 59
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 52

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY

    OPEN_KEY        shift and go to state 65


state 53

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body . CLOSE_KEY SEMICOLON constructor class_declaration2

    CLOSE_KEY       shift and go to state 66


state 54

    (23) class_body -> class_body1 . class_body3
    (27) class_body3 -> . class_function_declaration class_body4
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    FUNCTION        shift and go to state 69

    class_body3                    shift and go to state 67
    class_function_declaration     shift and go to state 68

state 55

    (24) class_body1 -> variable_declaration . class_body2
    (25) class_body2 -> . variable_declaration class_body2
    (26) class_body2 -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (136) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        reduce using rule 136 (epsilon -> .)

    variable_declaration           shift and go to state 70
    class_body2                    shift and go to state 71
    epsilon                        shift and go to state 72

state 56

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID . np_set_current_var_name SEMICOLON np_add_variable
    (38) np_set_current_var_name -> . epsilon
    (136) epsilon -> .

    SEMICOLON       reduce using rule 136 (epsilon -> .)

    np_set_current_var_name        shift and go to state 73
    epsilon                        shift and go to state 49

state 57

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN . data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 74

state 58

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN . ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    ID              shift and go to state 75


state 59

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 76


state 60

    (90) parameter -> atomic_var_type . data_type ID parameter1
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 77

state 61

    (91) parameter -> OBJ . ID ID parameter1

    ID              shift and go to state 78


state 62

    (92) parameter -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 92 (parameter -> epsilon .)


state 63

    (39) atomic_var_type -> VAR .

    INT             reduce using rule 39 (atomic_var_type -> VAR .)
    FLOAT           reduce using rule 39 (atomic_var_type -> VAR .)
    STRING          reduce using rule 39 (atomic_var_type -> VAR .)
    BOOL            reduce using rule 39 (atomic_var_type -> VAR .)


state 64

    (40) atomic_var_type -> GROUP .

    INT             reduce using rule 40 (atomic_var_type -> GROUP .)
    FLOAT           reduce using rule 40 (atomic_var_type -> GROUP .)
    STRING          reduce using rule 40 (atomic_var_type -> GROUP .)
    BOOL            reduce using rule 40 (atomic_var_type -> GROUP .)


state 65

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY . variable_declaration_loop statement_loop CLOSE_KEY
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (136) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    variable_declaration_loop      shift and go to state 79
    variable_declaration           shift and go to state 80
    epsilon                        shift and go to state 81

state 66

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY . SEMICOLON constructor class_declaration2

    SEMICOLON       shift and go to state 82


state 67

    (23) class_body -> class_body1 class_body3 .

    CLOSE_KEY       reduce using rule 23 (class_body -> class_body1 class_body3 .)


state 68

    (27) class_body3 -> class_function_declaration . class_body4
    (28) class_body4 -> . class_function_declaration class_body4
    (29) class_body4 -> . epsilon
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (136) epsilon -> .

    FUNCTION        shift and go to state 69
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    class_function_declaration     shift and go to state 83
    class_body4                    shift and go to state 84
    epsilon                        shift and go to state 85

state 69

    (87) class_function_declaration -> FUNCTION . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    ID              shift and go to state 86


state 70

    (25) class_body2 -> variable_declaration . class_body2
    (25) class_body2 -> . variable_declaration class_body2
    (26) class_body2 -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (136) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    FUNCTION        reduce using rule 136 (epsilon -> .)

    variable_declaration           shift and go to state 70
    class_body2                    shift and go to state 87
    epsilon                        shift and go to state 72

state 71

    (24) class_body1 -> variable_declaration class_body2 .

    FUNCTION        reduce using rule 24 (class_body1 -> variable_declaration class_body2 .)


state 72

    (26) class_body2 -> epsilon .

    FUNCTION        reduce using rule 26 (class_body2 -> epsilon .)


state 73

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 88


state 74

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type . np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (37) np_set_current_var_data_type -> . epsilon
    (136) epsilon -> .

    OPEN_BRACKET    reduce using rule 136 (epsilon -> .)

    np_set_current_var_data_type   shift and go to state 89
    epsilon                        shift and go to state 47

state 75

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID . OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable

    OPEN_PARENTHESIS shift and go to state 90


state 76

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    RETURNS         shift and go to state 91


state 77

    (90) parameter -> atomic_var_type data_type . ID parameter1

    ID              shift and go to state 92


state 78

    (91) parameter -> OBJ ID . ID parameter1

    ID              shift and go to state 93


state 79

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop . statement_loop CLOSE_KEY
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 94
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 80

    (31) variable_declaration_loop -> variable_declaration . variable_declaration_loop
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (136) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    variable_declaration           shift and go to state 80
    variable_declaration_loop      shift and go to state 110
    epsilon                        shift and go to state 81

state 81

    (32) variable_declaration_loop -> epsilon .

    IF              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    FOR             reduce using rule 32 (variable_declaration_loop -> epsilon .)
    WHILE           reduce using rule 32 (variable_declaration_loop -> epsilon .)
    DO              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    READ            reduce using rule 32 (variable_declaration_loop -> epsilon .)
    WRITE           reduce using rule 32 (variable_declaration_loop -> epsilon .)
    ID              reduce using rule 32 (variable_declaration_loop -> epsilon .)
    RETURN          reduce using rule 32 (variable_declaration_loop -> epsilon .)
    CLOSE_KEY       reduce using rule 32 (variable_declaration_loop -> epsilon .)


state 82

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON . constructor class_declaration2
    (30) constructor -> . CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    CONSTRUCTOR     shift and go to state 112

    constructor                    shift and go to state 111

state 83

    (28) class_body4 -> class_function_declaration . class_body4
    (28) class_body4 -> . class_function_declaration class_body4
    (29) class_body4 -> . epsilon
    (87) class_function_declaration -> . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (136) epsilon -> .

    FUNCTION        shift and go to state 69
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    class_function_declaration     shift and go to state 83
    class_body4                    shift and go to state 113
    epsilon                        shift and go to state 85

state 84

    (27) class_body3 -> class_function_declaration class_body4 .

    CLOSE_KEY       reduce using rule 27 (class_body3 -> class_function_declaration class_body4 .)


state 85

    (29) class_body4 -> epsilon .

    CLOSE_KEY       reduce using rule 29 (class_body4 -> epsilon .)


state 86

    (87) class_function_declaration -> FUNCTION ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    OPEN_PARENTHESIS shift and go to state 114


state 87

    (25) class_body2 -> variable_declaration class_body2 .

    FUNCTION        reduce using rule 25 (class_body2 -> variable_declaration class_body2 .)


state 88

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (136) epsilon -> .

    CLASS           reduce using rule 136 (epsilon -> .)
    VAR             reduce using rule 136 (epsilon -> .)
    GROUP           reduce using rule 136 (epsilon -> .)
    OBJ             reduce using rule 136 (epsilon -> .)
    FUNCTION        reduce using rule 136 (epsilon -> .)
    MAIN            reduce using rule 136 (epsilon -> .)
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    np_add_variable                shift and go to state 115
    epsilon                        shift and go to state 116

state 89

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type . OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    OPEN_BRACKET    shift and go to state 117


state 90

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS . variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (42) variable_declaration1 -> . hyper_exp_loop
    (43) variable_declaration1 -> . epsilon
    (120) hyper_exp_loop -> . hyper_exp hyper_exp_loop1
    (136) epsilon -> .
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    variable_declaration1          shift and go to state 119
    hyper_exp_loop                 shift and go to state 120
    epsilon                        shift and go to state 121
    hyper_exp                      shift and go to state 122
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 91

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 133
    data_type                      shift and go to state 134

state 92

    (90) parameter -> atomic_var_type data_type ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter1                     shift and go to state 136
    epsilon                        shift and go to state 138

state 93

    (91) parameter -> OBJ ID ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter1                     shift and go to state 139
    epsilon                        shift and go to state 138

state 94

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop . CLOSE_KEY

    CLOSE_KEY       shift and go to state 140


state 95

    (8) statement_loop -> statement . statement_loop1
    (9) statement_loop1 -> . statement statement_loop1
    (10) statement_loop1 -> . epsilon
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (136) epsilon -> .
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement                      shift and go to state 141
    statement_loop1                shift and go to state 142
    epsilon                        shift and go to state 143
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 96

    (44) statement -> assignment .

    IF              reduce using rule 44 (statement -> assignment .)
    FOR             reduce using rule 44 (statement -> assignment .)
    WHILE           reduce using rule 44 (statement -> assignment .)
    DO              reduce using rule 44 (statement -> assignment .)
    READ            reduce using rule 44 (statement -> assignment .)
    WRITE           reduce using rule 44 (statement -> assignment .)
    ID              reduce using rule 44 (statement -> assignment .)
    CLOSE_KEY       reduce using rule 44 (statement -> assignment .)
    RETURN          reduce using rule 44 (statement -> assignment .)


state 97

    (45) statement -> conditional .

    IF              reduce using rule 45 (statement -> conditional .)
    FOR             reduce using rule 45 (statement -> conditional .)
    WHILE           reduce using rule 45 (statement -> conditional .)
    DO              reduce using rule 45 (statement -> conditional .)
    READ            reduce using rule 45 (statement -> conditional .)
    WRITE           reduce using rule 45 (statement -> conditional .)
    ID              reduce using rule 45 (statement -> conditional .)
    CLOSE_KEY       reduce using rule 45 (statement -> conditional .)
    RETURN          reduce using rule 45 (statement -> conditional .)


state 98

    (46) statement -> cycle .

    IF              reduce using rule 46 (statement -> cycle .)
    FOR             reduce using rule 46 (statement -> cycle .)
    WHILE           reduce using rule 46 (statement -> cycle .)
    DO              reduce using rule 46 (statement -> cycle .)
    READ            reduce using rule 46 (statement -> cycle .)
    WRITE           reduce using rule 46 (statement -> cycle .)
    ID              reduce using rule 46 (statement -> cycle .)
    CLOSE_KEY       reduce using rule 46 (statement -> cycle .)
    RETURN          reduce using rule 46 (statement -> cycle .)


state 99

    (47) statement -> read .

    IF              reduce using rule 47 (statement -> read .)
    FOR             reduce using rule 47 (statement -> read .)
    WHILE           reduce using rule 47 (statement -> read .)
    DO              reduce using rule 47 (statement -> read .)
    READ            reduce using rule 47 (statement -> read .)
    WRITE           reduce using rule 47 (statement -> read .)
    ID              reduce using rule 47 (statement -> read .)
    CLOSE_KEY       reduce using rule 47 (statement -> read .)
    RETURN          reduce using rule 47 (statement -> read .)


state 100

    (48) statement -> write .

    IF              reduce using rule 48 (statement -> write .)
    FOR             reduce using rule 48 (statement -> write .)
    WHILE           reduce using rule 48 (statement -> write .)
    DO              reduce using rule 48 (statement -> write .)
    READ            reduce using rule 48 (statement -> write .)
    WRITE           reduce using rule 48 (statement -> write .)
    ID              reduce using rule 48 (statement -> write .)
    CLOSE_KEY       reduce using rule 48 (statement -> write .)
    RETURN          reduce using rule 48 (statement -> write .)


state 101

    (49) statement -> function_call .

    IF              reduce using rule 49 (statement -> function_call .)
    FOR             reduce using rule 49 (statement -> function_call .)
    WHILE           reduce using rule 49 (statement -> function_call .)
    DO              reduce using rule 49 (statement -> function_call .)
    READ            reduce using rule 49 (statement -> function_call .)
    WRITE           reduce using rule 49 (statement -> function_call .)
    ID              reduce using rule 49 (statement -> function_call .)
    CLOSE_KEY       reduce using rule 49 (statement -> function_call .)
    RETURN          reduce using rule 49 (statement -> function_call .)


state 102

    (50) assignment -> variable . ASSIGN hyper_exp SEMICOLON

    ASSIGN          shift and go to state 144


state 103

    (96) conditional -> IF . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1

    OPEN_PARENTHESIS shift and go to state 145


state 104

    (102) cycle -> FOR . OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1

    OPEN_PARENTHESIS shift and go to state 146


state 105

    (123) function_call -> ID . function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> ID . variable1
    (124) function_call1 -> . DOT ID
    (125) function_call1 -> . epsilon
    (15) variable1 -> . OPEN_BRACKET hyper_exp CLOSE_BRACKET
    (16) variable1 -> . DOT ID
    (17) variable1 -> . epsilon
    (136) epsilon -> .

    DOT             shift and go to state 149
    OPEN_BRACKET    shift and go to state 151
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ASSIGN          reduce using rule 136 (epsilon -> .)
    MULTIPLICATION  reduce using rule 136 (epsilon -> .)
    DIVISION        reduce using rule 136 (epsilon -> .)
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    function_call1                 shift and go to state 147
    variable1                      shift and go to state 148
    epsilon                        shift and go to state 150

state 106

    (103) cycle -> WHILE . np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (106) np_while_1 -> . epsilon
    (136) epsilon -> .

    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)

    np_while_1                     shift and go to state 152
    epsilon                        shift and go to state 153

state 107

    (104) cycle -> DO . np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (109) np_do_while_1 -> . epsilon
    (136) epsilon -> .

    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    np_do_while_1                  shift and go to state 154
    epsilon                        shift and go to state 155

state 108

    (111) read -> READ . OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 156


state 109

    (115) write -> WRITE . OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 157


state 110

    (31) variable_declaration_loop -> variable_declaration variable_declaration_loop .

    IF              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    FOR             reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    WHILE           reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    DO              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    READ            reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    WRITE           reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    ID              reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    RETURN          reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)
    CLOSE_KEY       reduce using rule 31 (variable_declaration_loop -> variable_declaration variable_declaration_loop .)


state 111

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor . class_declaration2
    (21) class_declaration2 -> . class_function class_declaration2
    (22) class_declaration2 -> . epsilon
    (128) class_function -> . AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (136) epsilon -> .

    AT_CLASS        shift and go to state 161
    CLASS           reduce using rule 136 (epsilon -> .)
    VAR             reduce using rule 136 (epsilon -> .)
    GROUP           reduce using rule 136 (epsilon -> .)
    OBJ             reduce using rule 136 (epsilon -> .)
    FUNCTION        reduce using rule 136 (epsilon -> .)
    MAIN            reduce using rule 136 (epsilon -> .)

    class_declaration2             shift and go to state 158
    class_function                 shift and go to state 159
    epsilon                        shift and go to state 160

state 112

    (30) constructor -> CONSTRUCTOR . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    ID              shift and go to state 162


state 113

    (28) class_body4 -> class_function_declaration class_body4 .

    CLOSE_KEY       reduce using rule 28 (class_body4 -> class_function_declaration class_body4 .)


state 114

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (136) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter                      shift and go to state 163
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 115

    (33) variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .

    CLASS           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    VAR             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    GROUP           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    OBJ             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    MAIN            reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    IF              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    FOR             reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    WHILE           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    DO              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    READ            reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    WRITE           reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    ID              reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    RETURN          reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 33 (variable_declaration -> VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable .)


state 116

    (41) np_add_variable -> epsilon .

    CLASS           reduce using rule 41 (np_add_variable -> epsilon .)
    VAR             reduce using rule 41 (np_add_variable -> epsilon .)
    GROUP           reduce using rule 41 (np_add_variable -> epsilon .)
    OBJ             reduce using rule 41 (np_add_variable -> epsilon .)
    FUNCTION        reduce using rule 41 (np_add_variable -> epsilon .)
    MAIN            reduce using rule 41 (np_add_variable -> epsilon .)
    IF              reduce using rule 41 (np_add_variable -> epsilon .)
    FOR             reduce using rule 41 (np_add_variable -> epsilon .)
    WHILE           reduce using rule 41 (np_add_variable -> epsilon .)
    DO              reduce using rule 41 (np_add_variable -> epsilon .)
    READ            reduce using rule 41 (np_add_variable -> epsilon .)
    WRITE           reduce using rule 41 (np_add_variable -> epsilon .)
    ID              reduce using rule 41 (np_add_variable -> epsilon .)
    RETURN          reduce using rule 41 (np_add_variable -> epsilon .)
    CLOSE_KEY       reduce using rule 41 (np_add_variable -> epsilon .)


state 117

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET . INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable

    INT_VALUE       shift and go to state 164


state 118

    (80) factor -> OPEN_PARENTHESIS . np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (81) np_add_open_parenthesis -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_open_parenthesis        shift and go to state 165
    epsilon                        shift and go to state 166

state 119

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 . CLOSE_PARENTHESIS SEMICOLON np_add_variable

    CLOSE_PARENTHESIS shift and go to state 167


state 120

    (42) variable_declaration1 -> hyper_exp_loop .

    CLOSE_PARENTHESIS reduce using rule 42 (variable_declaration1 -> hyper_exp_loop .)


state 121

    (43) variable_declaration1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 43 (variable_declaration1 -> epsilon .)


state 122

    (120) hyper_exp_loop -> hyper_exp . hyper_exp_loop1
    (121) hyper_exp_loop1 -> . COMMA hyper_exp hyper_exp_loop1
    (122) hyper_exp_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 169
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    hyper_exp_loop1                shift and go to state 168
    epsilon                        shift and go to state 170

state 123

    (52) hyper_exp -> super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (136) epsilon -> .

    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_hyper_exp                   shift and go to state 171
    epsilon                        shift and go to state 172

state 124

    (57) super_exp -> exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_super_exp                   shift and go to state 173
    epsilon                        shift and go to state 174

state 125

    (64) exp -> term . np_exp exp1
    (68) np_exp -> . epsilon
    (136) epsilon -> .

    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_exp                         shift and go to state 175
    epsilon                        shift and go to state 176

state 126

    (69) term -> factor . np_term term1
    (73) np_term -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  reduce using rule 136 (epsilon -> .)
    DIVISION        reduce using rule 136 (epsilon -> .)
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_term                        shift and go to state 177
    epsilon                        shift and go to state 178

state 127

    (74) factor -> function_call .

    MULTIPLICATION  reduce using rule 74 (factor -> function_call .)
    DIVISION        reduce using rule 74 (factor -> function_call .)
    PLUS            reduce using rule 74 (factor -> function_call .)
    MINUS           reduce using rule 74 (factor -> function_call .)
    GREATER_THAN    reduce using rule 74 (factor -> function_call .)
    LESS_THAN       reduce using rule 74 (factor -> function_call .)
    EQUAL_TO        reduce using rule 74 (factor -> function_call .)
    NOT_EQUAL_TO    reduce using rule 74 (factor -> function_call .)
    AND             reduce using rule 74 (factor -> function_call .)
    OR              reduce using rule 74 (factor -> function_call .)
    COMMA           reduce using rule 74 (factor -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 74 (factor -> function_call .)
    SEMICOLON       reduce using rule 74 (factor -> function_call .)
    CLOSE_BRACKET   reduce using rule 74 (factor -> function_call .)


state 128

    (75) factor -> FLOAT_VALUE .

    MULTIPLICATION  reduce using rule 75 (factor -> FLOAT_VALUE .)
    DIVISION        reduce using rule 75 (factor -> FLOAT_VALUE .)
    PLUS            reduce using rule 75 (factor -> FLOAT_VALUE .)
    MINUS           reduce using rule 75 (factor -> FLOAT_VALUE .)
    GREATER_THAN    reduce using rule 75 (factor -> FLOAT_VALUE .)
    LESS_THAN       reduce using rule 75 (factor -> FLOAT_VALUE .)
    EQUAL_TO        reduce using rule 75 (factor -> FLOAT_VALUE .)
    NOT_EQUAL_TO    reduce using rule 75 (factor -> FLOAT_VALUE .)
    AND             reduce using rule 75 (factor -> FLOAT_VALUE .)
    OR              reduce using rule 75 (factor -> FLOAT_VALUE .)
    COMMA           reduce using rule 75 (factor -> FLOAT_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 75 (factor -> FLOAT_VALUE .)
    SEMICOLON       reduce using rule 75 (factor -> FLOAT_VALUE .)
    CLOSE_BRACKET   reduce using rule 75 (factor -> FLOAT_VALUE .)


state 129

    (76) factor -> INT_VALUE .

    MULTIPLICATION  reduce using rule 76 (factor -> INT_VALUE .)
    DIVISION        reduce using rule 76 (factor -> INT_VALUE .)
    PLUS            reduce using rule 76 (factor -> INT_VALUE .)
    MINUS           reduce using rule 76 (factor -> INT_VALUE .)
    GREATER_THAN    reduce using rule 76 (factor -> INT_VALUE .)
    LESS_THAN       reduce using rule 76 (factor -> INT_VALUE .)
    EQUAL_TO        reduce using rule 76 (factor -> INT_VALUE .)
    NOT_EQUAL_TO    reduce using rule 76 (factor -> INT_VALUE .)
    AND             reduce using rule 76 (factor -> INT_VALUE .)
    OR              reduce using rule 76 (factor -> INT_VALUE .)
    COMMA           reduce using rule 76 (factor -> INT_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 76 (factor -> INT_VALUE .)
    SEMICOLON       reduce using rule 76 (factor -> INT_VALUE .)
    CLOSE_BRACKET   reduce using rule 76 (factor -> INT_VALUE .)


state 130

    (77) factor -> BOOL_VALUE .

    MULTIPLICATION  reduce using rule 77 (factor -> BOOL_VALUE .)
    DIVISION        reduce using rule 77 (factor -> BOOL_VALUE .)
    PLUS            reduce using rule 77 (factor -> BOOL_VALUE .)
    MINUS           reduce using rule 77 (factor -> BOOL_VALUE .)
    GREATER_THAN    reduce using rule 77 (factor -> BOOL_VALUE .)
    LESS_THAN       reduce using rule 77 (factor -> BOOL_VALUE .)
    EQUAL_TO        reduce using rule 77 (factor -> BOOL_VALUE .)
    NOT_EQUAL_TO    reduce using rule 77 (factor -> BOOL_VALUE .)
    AND             reduce using rule 77 (factor -> BOOL_VALUE .)
    OR              reduce using rule 77 (factor -> BOOL_VALUE .)
    COMMA           reduce using rule 77 (factor -> BOOL_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 77 (factor -> BOOL_VALUE .)
    SEMICOLON       reduce using rule 77 (factor -> BOOL_VALUE .)
    CLOSE_BRACKET   reduce using rule 77 (factor -> BOOL_VALUE .)


state 131

    (78) factor -> STRING_VALUE .

    MULTIPLICATION  reduce using rule 78 (factor -> STRING_VALUE .)
    DIVISION        reduce using rule 78 (factor -> STRING_VALUE .)
    PLUS            reduce using rule 78 (factor -> STRING_VALUE .)
    MINUS           reduce using rule 78 (factor -> STRING_VALUE .)
    GREATER_THAN    reduce using rule 78 (factor -> STRING_VALUE .)
    LESS_THAN       reduce using rule 78 (factor -> STRING_VALUE .)
    EQUAL_TO        reduce using rule 78 (factor -> STRING_VALUE .)
    NOT_EQUAL_TO    reduce using rule 78 (factor -> STRING_VALUE .)
    AND             reduce using rule 78 (factor -> STRING_VALUE .)
    OR              reduce using rule 78 (factor -> STRING_VALUE .)
    COMMA           reduce using rule 78 (factor -> STRING_VALUE .)
    CLOSE_PARENTHESIS reduce using rule 78 (factor -> STRING_VALUE .)
    SEMICOLON       reduce using rule 78 (factor -> STRING_VALUE .)
    CLOSE_BRACKET   reduce using rule 78 (factor -> STRING_VALUE .)


state 132

    (79) factor -> variable .

    MULTIPLICATION  reduce using rule 79 (factor -> variable .)
    DIVISION        reduce using rule 79 (factor -> variable .)
    PLUS            reduce using rule 79 (factor -> variable .)
    MINUS           reduce using rule 79 (factor -> variable .)
    GREATER_THAN    reduce using rule 79 (factor -> variable .)
    LESS_THAN       reduce using rule 79 (factor -> variable .)
    EQUAL_TO        reduce using rule 79 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 79 (factor -> variable .)
    AND             reduce using rule 79 (factor -> variable .)
    OR              reduce using rule 79 (factor -> variable .)
    COMMA           reduce using rule 79 (factor -> variable .)
    CLOSE_PARENTHESIS reduce using rule 79 (factor -> variable .)
    SEMICOLON       reduce using rule 79 (factor -> variable .)
    CLOSE_BRACKET   reduce using rule 79 (factor -> variable .)


state 133

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (131) np_set_function_return_type -> . epsilon
    (136) epsilon -> .

    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    np_set_function_return_type    shift and go to state 179
    epsilon                        shift and go to state 180

state 134

    (88) return_arg -> data_type .

    OPEN_KEY        reduce using rule 88 (return_arg -> data_type .)
    SEMICOLON       reduce using rule 88 (return_arg -> data_type .)


state 135

    (89) return_arg -> VOID .

    OPEN_KEY        reduce using rule 89 (return_arg -> VOID .)
    SEMICOLON       reduce using rule 89 (return_arg -> VOID .)


state 136

    (90) parameter -> atomic_var_type data_type ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 90 (parameter -> atomic_var_type data_type ID parameter1 .)


state 137

    (93) parameter1 -> COMMA . atomic_var_type data_type ID parameter1
    (94) parameter1 -> COMMA . OBJ ID ID parameter1
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP

    OBJ             shift and go to state 182
    VAR             shift and go to state 63
    GROUP           shift and go to state 64

    atomic_var_type                shift and go to state 181

state 138

    (95) parameter1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 95 (parameter1 -> epsilon .)


state 139

    (91) parameter -> OBJ ID ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 91 (parameter -> OBJ ID ID parameter1 .)


state 140

    (2) main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY .

    $end            reduce using rule 2 (main_function -> MAIN np_add_main_internal_scope OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_KEY variable_declaration_loop statement_loop CLOSE_KEY .)


state 141

    (9) statement_loop1 -> statement . statement_loop1
    (9) statement_loop1 -> . statement statement_loop1
    (10) statement_loop1 -> . epsilon
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (136) epsilon -> .
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement                      shift and go to state 141
    statement_loop1                shift and go to state 183
    epsilon                        shift and go to state 143
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 142

    (8) statement_loop -> statement statement_loop1 .

    CLOSE_KEY       reduce using rule 8 (statement_loop -> statement statement_loop1 .)
    RETURN          reduce using rule 8 (statement_loop -> statement statement_loop1 .)


state 143

    (10) statement_loop1 -> epsilon .

    CLOSE_KEY       reduce using rule 10 (statement_loop1 -> epsilon .)
    RETURN          reduce using rule 10 (statement_loop1 -> epsilon .)


state 144

    (50) assignment -> variable ASSIGN . hyper_exp SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    variable                       shift and go to state 132
    hyper_exp                      shift and go to state 184
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127

state 145

    (96) conditional -> IF OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 185
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 146

    (102) cycle -> FOR OPEN_PARENTHESIS . ID IN ID CLOSE_PARENTHESIS cycle1

    ID              shift and go to state 186


state 147

    (123) function_call -> ID function_call1 . OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 187


state 148

    (14) variable -> ID variable1 .

    ASSIGN          reduce using rule 14 (variable -> ID variable1 .)
    MULTIPLICATION  reduce using rule 14 (variable -> ID variable1 .)
    DIVISION        reduce using rule 14 (variable -> ID variable1 .)
    PLUS            reduce using rule 14 (variable -> ID variable1 .)
    MINUS           reduce using rule 14 (variable -> ID variable1 .)
    GREATER_THAN    reduce using rule 14 (variable -> ID variable1 .)
    LESS_THAN       reduce using rule 14 (variable -> ID variable1 .)
    EQUAL_TO        reduce using rule 14 (variable -> ID variable1 .)
    NOT_EQUAL_TO    reduce using rule 14 (variable -> ID variable1 .)
    AND             reduce using rule 14 (variable -> ID variable1 .)
    OR              reduce using rule 14 (variable -> ID variable1 .)
    COMMA           reduce using rule 14 (variable -> ID variable1 .)
    CLOSE_PARENTHESIS reduce using rule 14 (variable -> ID variable1 .)
    SEMICOLON       reduce using rule 14 (variable -> ID variable1 .)
    CLOSE_BRACKET   reduce using rule 14 (variable -> ID variable1 .)


state 149

    (124) function_call1 -> DOT . ID
    (16) variable1 -> DOT . ID

    ID              shift and go to state 188


state 150

    (125) function_call1 -> epsilon .
    (17) variable1 -> epsilon .

    OPEN_PARENTHESIS reduce using rule 125 (function_call1 -> epsilon .)
    ASSIGN          reduce using rule 17 (variable1 -> epsilon .)
    MULTIPLICATION  reduce using rule 17 (variable1 -> epsilon .)
    DIVISION        reduce using rule 17 (variable1 -> epsilon .)
    PLUS            reduce using rule 17 (variable1 -> epsilon .)
    MINUS           reduce using rule 17 (variable1 -> epsilon .)
    GREATER_THAN    reduce using rule 17 (variable1 -> epsilon .)
    LESS_THAN       reduce using rule 17 (variable1 -> epsilon .)
    EQUAL_TO        reduce using rule 17 (variable1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 17 (variable1 -> epsilon .)
    AND             reduce using rule 17 (variable1 -> epsilon .)
    OR              reduce using rule 17 (variable1 -> epsilon .)
    COMMA           reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 17 (variable1 -> epsilon .)
    SEMICOLON       reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 17 (variable1 -> epsilon .)


state 151

    (15) variable1 -> OPEN_BRACKET . hyper_exp CLOSE_BRACKET
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 189
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 152

    (103) cycle -> WHILE np_while_1 . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1

    OPEN_PARENTHESIS shift and go to state 190


state 153

    (106) np_while_1 -> epsilon .

    OPEN_PARENTHESIS reduce using rule 106 (np_while_1 -> epsilon .)


state 154

    (104) cycle -> DO np_do_while_1 . OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    OPEN_KEY        shift and go to state 191


state 155

    (109) np_do_while_1 -> epsilon .

    OPEN_KEY        reduce using rule 109 (np_do_while_1 -> epsilon .)


state 156

    (111) read -> READ OPEN_PARENTHESIS . variable_loop CLOSE_PARENTHESIS SEMICOLON
    (112) variable_loop -> . variable variable_loop1
    (14) variable -> . ID variable1

    ID              shift and go to state 194

    variable_loop                  shift and go to state 192
    variable                       shift and go to state 193

state 157

    (115) write -> WRITE OPEN_PARENTHESIS . write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (116) write_hyper_exp_loop -> . hyper_exp np_add_write_quad write_hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    write_hyper_exp_loop           shift and go to state 195
    hyper_exp                      shift and go to state 196
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 158

    (18) class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .

    CLASS           reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    VAR             reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    GROUP           reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    OBJ             reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    FUNCTION        reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)
    MAIN            reduce using rule 18 (class_declaration -> CLASS ID class_declaration1 OPEN_KEY class_body CLOSE_KEY SEMICOLON constructor class_declaration2 .)


state 159

    (21) class_declaration2 -> class_function . class_declaration2
    (21) class_declaration2 -> . class_function class_declaration2
    (22) class_declaration2 -> . epsilon
    (128) class_function -> . AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (136) epsilon -> .

    AT_CLASS        shift and go to state 161
    CLASS           reduce using rule 136 (epsilon -> .)
    VAR             reduce using rule 136 (epsilon -> .)
    GROUP           reduce using rule 136 (epsilon -> .)
    OBJ             reduce using rule 136 (epsilon -> .)
    FUNCTION        reduce using rule 136 (epsilon -> .)
    MAIN            reduce using rule 136 (epsilon -> .)

    class_function                 shift and go to state 159
    class_declaration2             shift and go to state 197
    epsilon                        shift and go to state 160

state 160

    (22) class_declaration2 -> epsilon .

    CLASS           reduce using rule 22 (class_declaration2 -> epsilon .)
    VAR             reduce using rule 22 (class_declaration2 -> epsilon .)
    GROUP           reduce using rule 22 (class_declaration2 -> epsilon .)
    OBJ             reduce using rule 22 (class_declaration2 -> epsilon .)
    FUNCTION        reduce using rule 22 (class_declaration2 -> epsilon .)
    MAIN            reduce using rule 22 (class_declaration2 -> epsilon .)


state 161

    (128) class_function -> AT_CLASS . ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 198


state 162

    (30) constructor -> CONSTRUCTOR ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 199


state 163

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 200


state 164

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE . CLOSE_BRACKET SEMICOLON np_add_variable

    CLOSE_BRACKET   shift and go to state 201


state 165

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis . hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 202
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 166

    (81) np_add_open_parenthesis -> epsilon .

    FLOAT_VALUE     reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    INT_VALUE       reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    BOOL_VALUE      reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    STRING_VALUE    reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    OPEN_PARENTHESIS reduce using rule 81 (np_add_open_parenthesis -> epsilon .)
    ID              reduce using rule 81 (np_add_open_parenthesis -> epsilon .)


state 167

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 203


state 168

    (120) hyper_exp_loop -> hyper_exp hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 120 (hyper_exp_loop -> hyper_exp hyper_exp_loop1 .)


state 169

    (121) hyper_exp_loop1 -> COMMA . hyper_exp hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 204
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 170

    (122) hyper_exp_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 122 (hyper_exp_loop1 -> epsilon .)


state 171

    (52) hyper_exp -> super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (136) epsilon -> .

    AND             shift and go to state 206
    OR              shift and go to state 207
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    hyper_exp1                     shift and go to state 205
    epsilon                        shift and go to state 208

state 172

    (56) np_hyper_exp -> epsilon .

    AND             reduce using rule 56 (np_hyper_exp -> epsilon .)
    OR              reduce using rule 56 (np_hyper_exp -> epsilon .)
    COMMA           reduce using rule 56 (np_hyper_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 56 (np_hyper_exp -> epsilon .)
    SEMICOLON       reduce using rule 56 (np_hyper_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 56 (np_hyper_exp -> epsilon .)


state 173

    (57) super_exp -> exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    shift and go to state 210
    LESS_THAN       shift and go to state 211
    EQUAL_TO        shift and go to state 212
    NOT_EQUAL_TO    shift and go to state 213
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    super_exp1                     shift and go to state 209
    epsilon                        shift and go to state 214

state 174

    (63) np_super_exp -> epsilon .

    GREATER_THAN    reduce using rule 63 (np_super_exp -> epsilon .)
    LESS_THAN       reduce using rule 63 (np_super_exp -> epsilon .)
    EQUAL_TO        reduce using rule 63 (np_super_exp -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 63 (np_super_exp -> epsilon .)
    AND             reduce using rule 63 (np_super_exp -> epsilon .)
    OR              reduce using rule 63 (np_super_exp -> epsilon .)
    COMMA           reduce using rule 63 (np_super_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 63 (np_super_exp -> epsilon .)
    SEMICOLON       reduce using rule 63 (np_super_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 63 (np_super_exp -> epsilon .)


state 175

    (64) exp -> term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (136) epsilon -> .

    PLUS            shift and go to state 216
    MINUS           shift and go to state 217
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    exp1                           shift and go to state 215
    epsilon                        shift and go to state 218

state 176

    (68) np_exp -> epsilon .

    PLUS            reduce using rule 68 (np_exp -> epsilon .)
    MINUS           reduce using rule 68 (np_exp -> epsilon .)
    GREATER_THAN    reduce using rule 68 (np_exp -> epsilon .)
    LESS_THAN       reduce using rule 68 (np_exp -> epsilon .)
    EQUAL_TO        reduce using rule 68 (np_exp -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 68 (np_exp -> epsilon .)
    AND             reduce using rule 68 (np_exp -> epsilon .)
    OR              reduce using rule 68 (np_exp -> epsilon .)
    COMMA           reduce using rule 68 (np_exp -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 68 (np_exp -> epsilon .)
    SEMICOLON       reduce using rule 68 (np_exp -> epsilon .)
    CLOSE_BRACKET   reduce using rule 68 (np_exp -> epsilon .)


state 177

    (69) term -> factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  shift and go to state 220
    DIVISION        shift and go to state 221
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    term1                          shift and go to state 219
    epsilon                        shift and go to state 222

state 178

    (73) np_term -> epsilon .

    MULTIPLICATION  reduce using rule 73 (np_term -> epsilon .)
    DIVISION        reduce using rule 73 (np_term -> epsilon .)
    PLUS            reduce using rule 73 (np_term -> epsilon .)
    MINUS           reduce using rule 73 (np_term -> epsilon .)
    GREATER_THAN    reduce using rule 73 (np_term -> epsilon .)
    LESS_THAN       reduce using rule 73 (np_term -> epsilon .)
    EQUAL_TO        reduce using rule 73 (np_term -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 73 (np_term -> epsilon .)
    AND             reduce using rule 73 (np_term -> epsilon .)
    OR              reduce using rule 73 (np_term -> epsilon .)
    COMMA           reduce using rule 73 (np_term -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 73 (np_term -> epsilon .)
    SEMICOLON       reduce using rule 73 (np_term -> epsilon .)
    CLOSE_BRACKET   reduce using rule 73 (np_term -> epsilon .)


state 179

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type . OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY

    OPEN_KEY        shift and go to state 223


state 180

    (131) np_set_function_return_type -> epsilon .

    OPEN_KEY        reduce using rule 131 (np_set_function_return_type -> epsilon .)


state 181

    (93) parameter1 -> COMMA atomic_var_type . data_type ID parameter1
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    data_type                      shift and go to state 224

state 182

    (94) parameter1 -> COMMA OBJ . ID ID parameter1

    ID              shift and go to state 225


state 183

    (9) statement_loop1 -> statement statement_loop1 .

    CLOSE_KEY       reduce using rule 9 (statement_loop1 -> statement statement_loop1 .)
    RETURN          reduce using rule 9 (statement_loop1 -> statement statement_loop1 .)


state 184

    (50) assignment -> variable ASSIGN hyper_exp . SEMICOLON

    SEMICOLON       shift and go to state 226


state 185

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1

    CLOSE_PARENTHESIS shift and go to state 227


state 186

    (102) cycle -> FOR OPEN_PARENTHESIS ID . IN ID CLOSE_PARENTHESIS cycle1

    IN              shift and go to state 228


state 187

    (123) function_call -> ID function_call1 OPEN_PARENTHESIS . function_call2 CLOSE_PARENTHESIS SEMICOLON
    (126) function_call2 -> . hyper_exp_loop
    (127) function_call2 -> . epsilon
    (120) hyper_exp_loop -> . hyper_exp hyper_exp_loop1
    (136) epsilon -> .
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    function_call2                 shift and go to state 229
    hyper_exp_loop                 shift and go to state 230
    epsilon                        shift and go to state 231
    hyper_exp                      shift and go to state 122
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 188

    (124) function_call1 -> DOT ID .
    (16) variable1 -> DOT ID .

    OPEN_PARENTHESIS reduce using rule 124 (function_call1 -> DOT ID .)
    ASSIGN          reduce using rule 16 (variable1 -> DOT ID .)
    MULTIPLICATION  reduce using rule 16 (variable1 -> DOT ID .)
    DIVISION        reduce using rule 16 (variable1 -> DOT ID .)
    PLUS            reduce using rule 16 (variable1 -> DOT ID .)
    MINUS           reduce using rule 16 (variable1 -> DOT ID .)
    GREATER_THAN    reduce using rule 16 (variable1 -> DOT ID .)
    LESS_THAN       reduce using rule 16 (variable1 -> DOT ID .)
    EQUAL_TO        reduce using rule 16 (variable1 -> DOT ID .)
    NOT_EQUAL_TO    reduce using rule 16 (variable1 -> DOT ID .)
    AND             reduce using rule 16 (variable1 -> DOT ID .)
    OR              reduce using rule 16 (variable1 -> DOT ID .)
    COMMA           reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_PARENTHESIS reduce using rule 16 (variable1 -> DOT ID .)
    SEMICOLON       reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_BRACKET   reduce using rule 16 (variable1 -> DOT ID .)


state 189

    (15) variable1 -> OPEN_BRACKET hyper_exp . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 232


state 190

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 233
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 191

    (104) cycle -> DO np_do_while_1 OPEN_KEY . statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 234
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 192

    (111) read -> READ OPEN_PARENTHESIS variable_loop . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 235


state 193

    (112) variable_loop -> variable . variable_loop1
    (113) variable_loop1 -> . COMMA variable variable_loop1
    (114) variable_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 237
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    variable_loop1                 shift and go to state 236
    epsilon                        shift and go to state 238

state 194

    (14) variable -> ID . variable1
    (15) variable1 -> . OPEN_BRACKET hyper_exp CLOSE_BRACKET
    (16) variable1 -> . DOT ID
    (17) variable1 -> . epsilon
    (136) epsilon -> .

    OPEN_BRACKET    shift and go to state 151
    DOT             shift and go to state 239
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    variable1                      shift and go to state 148
    epsilon                        shift and go to state 240

state 195

    (115) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 241


state 196

    (116) write_hyper_exp_loop -> hyper_exp . np_add_write_quad write_hyper_exp_loop1
    (119) np_add_write_quad -> . epsilon
    (136) epsilon -> .

    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    np_add_write_quad              shift and go to state 242
    epsilon                        shift and go to state 243

state 197

    (21) class_declaration2 -> class_function class_declaration2 .

    CLASS           reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    VAR             reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    GROUP           reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    OBJ             reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    FUNCTION        reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)
    MAIN            reduce using rule 21 (class_declaration2 -> class_function class_declaration2 .)


state 198

    (128) class_function -> AT_CLASS ID . FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    FUNCTION        shift and go to state 244


state 199

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (136) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter                      shift and go to state 245
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 200

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg SEMICOLON

    RETURNS         shift and go to state 246


state 201

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET . SEMICOLON np_add_variable

    SEMICOLON       shift and go to state 247


state 202

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp . CLOSE_PARENTHESIS np_remove_open_parenthesis

    CLOSE_PARENTHESIS shift and go to state 248


state 203

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (136) epsilon -> .

    CLASS           reduce using rule 136 (epsilon -> .)
    VAR             reduce using rule 136 (epsilon -> .)
    GROUP           reduce using rule 136 (epsilon -> .)
    OBJ             reduce using rule 136 (epsilon -> .)
    FUNCTION        reduce using rule 136 (epsilon -> .)
    MAIN            reduce using rule 136 (epsilon -> .)
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    np_add_variable                shift and go to state 249
    epsilon                        shift and go to state 116

state 204

    (121) hyper_exp_loop1 -> COMMA hyper_exp . hyper_exp_loop1
    (121) hyper_exp_loop1 -> . COMMA hyper_exp hyper_exp_loop1
    (122) hyper_exp_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 169
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    hyper_exp_loop1                shift and go to state 250
    epsilon                        shift and go to state 170

state 205

    (52) hyper_exp -> super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 52 (hyper_exp -> super_exp np_hyper_exp hyper_exp1 .)


state 206

    (53) hyper_exp1 -> AND . np_add_operator super_exp np_hyper_exp hyper_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 251
    epsilon                        shift and go to state 252

state 207

    (54) hyper_exp1 -> OR . np_add_operator super_exp np_hyper_exp hyper_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 253
    epsilon                        shift and go to state 252

state 208

    (55) hyper_exp1 -> epsilon .

    COMMA           reduce using rule 55 (hyper_exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 55 (hyper_exp1 -> epsilon .)
    SEMICOLON       reduce using rule 55 (hyper_exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 55 (hyper_exp1 -> epsilon .)


state 209

    (57) super_exp -> exp np_super_exp super_exp1 .

    AND             reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    OR              reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 57 (super_exp -> exp np_super_exp super_exp1 .)


state 210

    (58) super_exp1 -> GREATER_THAN . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 254
    epsilon                        shift and go to state 252

state 211

    (59) super_exp1 -> LESS_THAN . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 255
    epsilon                        shift and go to state 252

state 212

    (60) super_exp1 -> EQUAL_TO . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 256
    epsilon                        shift and go to state 252

state 213

    (61) super_exp1 -> NOT_EQUAL_TO . np_add_operator exp np_super_exp super_exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 257
    epsilon                        shift and go to state 252

state 214

    (62) super_exp1 -> epsilon .

    AND             reduce using rule 62 (super_exp1 -> epsilon .)
    OR              reduce using rule 62 (super_exp1 -> epsilon .)
    COMMA           reduce using rule 62 (super_exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 62 (super_exp1 -> epsilon .)
    SEMICOLON       reduce using rule 62 (super_exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 62 (super_exp1 -> epsilon .)


state 215

    (64) exp -> term np_exp exp1 .

    GREATER_THAN    reduce using rule 64 (exp -> term np_exp exp1 .)
    LESS_THAN       reduce using rule 64 (exp -> term np_exp exp1 .)
    EQUAL_TO        reduce using rule 64 (exp -> term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 64 (exp -> term np_exp exp1 .)
    AND             reduce using rule 64 (exp -> term np_exp exp1 .)
    OR              reduce using rule 64 (exp -> term np_exp exp1 .)
    COMMA           reduce using rule 64 (exp -> term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 64 (exp -> term np_exp exp1 .)
    SEMICOLON       reduce using rule 64 (exp -> term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 64 (exp -> term np_exp exp1 .)


state 216

    (65) exp1 -> PLUS . np_add_operator term np_exp exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 258
    epsilon                        shift and go to state 252

state 217

    (66) exp1 -> MINUS . np_add_operator term np_exp exp1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 259
    epsilon                        shift and go to state 252

state 218

    (67) exp1 -> epsilon .

    GREATER_THAN    reduce using rule 67 (exp1 -> epsilon .)
    LESS_THAN       reduce using rule 67 (exp1 -> epsilon .)
    EQUAL_TO        reduce using rule 67 (exp1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 67 (exp1 -> epsilon .)
    AND             reduce using rule 67 (exp1 -> epsilon .)
    OR              reduce using rule 67 (exp1 -> epsilon .)
    COMMA           reduce using rule 67 (exp1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 67 (exp1 -> epsilon .)
    SEMICOLON       reduce using rule 67 (exp1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 67 (exp1 -> epsilon .)


state 219

    (69) term -> factor np_term term1 .

    PLUS            reduce using rule 69 (term -> factor np_term term1 .)
    MINUS           reduce using rule 69 (term -> factor np_term term1 .)
    GREATER_THAN    reduce using rule 69 (term -> factor np_term term1 .)
    LESS_THAN       reduce using rule 69 (term -> factor np_term term1 .)
    EQUAL_TO        reduce using rule 69 (term -> factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 69 (term -> factor np_term term1 .)
    AND             reduce using rule 69 (term -> factor np_term term1 .)
    OR              reduce using rule 69 (term -> factor np_term term1 .)
    COMMA           reduce using rule 69 (term -> factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 69 (term -> factor np_term term1 .)
    SEMICOLON       reduce using rule 69 (term -> factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 69 (term -> factor np_term term1 .)


state 220

    (70) term1 -> MULTIPLICATION . np_add_operator factor np_term term1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 260
    epsilon                        shift and go to state 252

state 221

    (71) term1 -> DIVISION . np_add_operator factor np_term term1
    (51) np_add_operator -> . epsilon
    (136) epsilon -> .

    FLOAT_VALUE     reduce using rule 136 (epsilon -> .)
    INT_VALUE       reduce using rule 136 (epsilon -> .)
    BOOL_VALUE      reduce using rule 136 (epsilon -> .)
    STRING_VALUE    reduce using rule 136 (epsilon -> .)
    OPEN_PARENTHESIS reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)

    np_add_operator                shift and go to state 261
    epsilon                        shift and go to state 252

state 222

    (72) term1 -> epsilon .

    PLUS            reduce using rule 72 (term1 -> epsilon .)
    MINUS           reduce using rule 72 (term1 -> epsilon .)
    GREATER_THAN    reduce using rule 72 (term1 -> epsilon .)
    LESS_THAN       reduce using rule 72 (term1 -> epsilon .)
    EQUAL_TO        reduce using rule 72 (term1 -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 72 (term1 -> epsilon .)
    AND             reduce using rule 72 (term1 -> epsilon .)
    OR              reduce using rule 72 (term1 -> epsilon .)
    COMMA           reduce using rule 72 (term1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 72 (term1 -> epsilon .)
    SEMICOLON       reduce using rule 72 (term1 -> epsilon .)
    CLOSE_BRACKET   reduce using rule 72 (term1 -> epsilon .)


state 223

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY . variable_declaration_loop function_statement_loop function_return CLOSE_KEY
    (31) variable_declaration_loop -> . variable_declaration variable_declaration_loop
    (32) variable_declaration_loop -> . epsilon
    (33) variable_declaration -> . VAR np_set_current_var_type data_type np_set_current_var_data_type ID np_set_current_var_name SEMICOLON np_add_variable
    (34) variable_declaration -> . GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable
    (35) variable_declaration -> . OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable
    (136) epsilon -> .

    VAR             shift and go to state 16
    GROUP           shift and go to state 17
    OBJ             shift and go to state 18
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    variable_declaration_loop      shift and go to state 262
    variable_declaration           shift and go to state 80
    epsilon                        shift and go to state 81

state 224

    (93) parameter1 -> COMMA atomic_var_type data_type . ID parameter1

    ID              shift and go to state 263


state 225

    (94) parameter1 -> COMMA OBJ ID . ID parameter1

    ID              shift and go to state 264


state 226

    (50) assignment -> variable ASSIGN hyper_exp SEMICOLON .

    IF              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    FOR             reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    WHILE           reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    DO              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    READ            reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    WRITE           reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    ID              reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    CLOSE_KEY       reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)
    RETURN          reduce using rule 50 (assignment -> variable ASSIGN hyper_exp SEMICOLON .)


state 227

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (99) np_if_1 -> . epsilon
    (136) epsilon -> .

    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    np_if_1                        shift and go to state 265
    epsilon                        shift and go to state 266

state 228

    (102) cycle -> FOR OPEN_PARENTHESIS ID IN . ID CLOSE_PARENTHESIS cycle1

    ID              shift and go to state 267


state 229

    (123) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 268


state 230

    (126) function_call2 -> hyper_exp_loop .

    CLOSE_PARENTHESIS reduce using rule 126 (function_call2 -> hyper_exp_loop .)


state 231

    (127) function_call2 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 127 (function_call2 -> epsilon .)


state 232

    (15) variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .

    ASSIGN          reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    MULTIPLICATION  reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    DIVISION        reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    PLUS            reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    MINUS           reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    EQUAL_TO        reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    NOT_EQUAL_TO    reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    AND             reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    OR              reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    COMMA           reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 15 (variable1 -> OPEN_BRACKET hyper_exp CLOSE_BRACKET .)


state 233

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_while_2 cycle1

    CLOSE_PARENTHESIS shift and go to state 269


state 234

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop . CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    CLOSE_KEY       shift and go to state 270


state 235

    (111) read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 271


state 236

    (112) variable_loop -> variable variable_loop1 .

    CLOSE_PARENTHESIS reduce using rule 112 (variable_loop -> variable variable_loop1 .)


state 237

    (113) variable_loop1 -> COMMA . variable variable_loop1
    (14) variable -> . ID variable1

    ID              shift and go to state 194

    variable                       shift and go to state 272

state 238

    (114) variable_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 114 (variable_loop1 -> epsilon .)


state 239

    (16) variable1 -> DOT . ID

    ID              shift and go to state 273


state 240

    (17) variable1 -> epsilon .

    COMMA           reduce using rule 17 (variable1 -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 17 (variable1 -> epsilon .)


state 241

    (115) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 274


state 242

    (116) write_hyper_exp_loop -> hyper_exp np_add_write_quad . write_hyper_exp_loop1
    (117) write_hyper_exp_loop1 -> . COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
    (118) write_hyper_exp_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 276
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    write_hyper_exp_loop1          shift and go to state 275
    epsilon                        shift and go to state 277

state 243

    (119) np_add_write_quad -> epsilon .

    COMMA           reduce using rule 119 (np_add_write_quad -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 119 (np_add_write_quad -> epsilon .)


state 244

    (128) class_function -> AT_CLASS ID FUNCTION . ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    ID              shift and go to state 278


state 245

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 279


state 246

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg SEMICOLON
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 280
    data_type                      shift and go to state 134

state 247

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON . np_add_variable
    (41) np_add_variable -> . epsilon
    (136) epsilon -> .

    CLASS           reduce using rule 136 (epsilon -> .)
    VAR             reduce using rule 136 (epsilon -> .)
    GROUP           reduce using rule 136 (epsilon -> .)
    OBJ             reduce using rule 136 (epsilon -> .)
    FUNCTION        reduce using rule 136 (epsilon -> .)
    MAIN            reduce using rule 136 (epsilon -> .)
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    np_add_variable                shift and go to state 281
    epsilon                        shift and go to state 116

state 248

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS . np_remove_open_parenthesis
    (82) np_remove_open_parenthesis -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  reduce using rule 136 (epsilon -> .)
    DIVISION        reduce using rule 136 (epsilon -> .)
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_remove_open_parenthesis     shift and go to state 282
    epsilon                        shift and go to state 283

state 249

    (35) variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .

    CLASS           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    VAR             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    GROUP           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    OBJ             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    MAIN            reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    IF              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    FOR             reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    WHILE           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    DO              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    READ            reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    WRITE           reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    ID              reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    RETURN          reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 35 (variable_declaration -> OBJ np_set_current_var_type ID np_set_current_var_name ASSIGN ID OPEN_PARENTHESIS variable_declaration1 CLOSE_PARENTHESIS SEMICOLON np_add_variable .)


state 250

    (121) hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 121 (hyper_exp_loop1 -> COMMA hyper_exp hyper_exp_loop1 .)


state 251

    (53) hyper_exp1 -> AND np_add_operator . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    super_exp                      shift and go to state 284
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 252

    (51) np_add_operator -> epsilon .

    FLOAT_VALUE     reduce using rule 51 (np_add_operator -> epsilon .)
    INT_VALUE       reduce using rule 51 (np_add_operator -> epsilon .)
    BOOL_VALUE      reduce using rule 51 (np_add_operator -> epsilon .)
    STRING_VALUE    reduce using rule 51 (np_add_operator -> epsilon .)
    OPEN_PARENTHESIS reduce using rule 51 (np_add_operator -> epsilon .)
    ID              reduce using rule 51 (np_add_operator -> epsilon .)


state 253

    (54) hyper_exp1 -> OR np_add_operator . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    super_exp                      shift and go to state 285
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 254

    (58) super_exp1 -> GREATER_THAN np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 286
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 255

    (59) super_exp1 -> LESS_THAN np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 287
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 256

    (60) super_exp1 -> EQUAL_TO np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 288
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 257

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    exp                            shift and go to state 289
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 258

    (65) exp1 -> PLUS np_add_operator . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    term                           shift and go to state 290
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 259

    (66) exp1 -> MINUS np_add_operator . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    term                           shift and go to state 291
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 260

    (70) term1 -> MULTIPLICATION np_add_operator . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    factor                         shift and go to state 292
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 261

    (71) term1 -> DIVISION np_add_operator . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    factor                         shift and go to state 293
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 262

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop . function_statement_loop function_return CLOSE_KEY
    (134) function_statement_loop -> . statement_loop
    (135) function_statement_loop -> . epsilon
    (8) statement_loop -> . statement statement_loop1
    (136) epsilon -> .
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    function_statement_loop        shift and go to state 294
    statement_loop                 shift and go to state 295
    epsilon                        shift and go to state 296
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 263

    (93) parameter1 -> COMMA atomic_var_type data_type ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter1                     shift and go to state 297
    epsilon                        shift and go to state 138

state 264

    (94) parameter1 -> COMMA OBJ ID ID . parameter1
    (93) parameter1 -> . COMMA atomic_var_type data_type ID parameter1
    (94) parameter1 -> . COMMA OBJ ID ID parameter1
    (95) parameter1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 137
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter1                     shift and go to state 298
    epsilon                        shift and go to state 138

state 265

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 . OPEN_KEY statement_loop CLOSE_KEY conditional1

    OPEN_KEY        shift and go to state 299


state 266

    (99) np_if_1 -> epsilon .

    OPEN_KEY        reduce using rule 99 (np_if_1 -> epsilon .)


state 267

    (102) cycle -> FOR OPEN_PARENTHESIS ID IN ID . CLOSE_PARENTHESIS cycle1

    CLOSE_PARENTHESIS shift and go to state 300


state 268

    (123) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 301


state 269

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_while_2 cycle1
    (107) np_while_2 -> . epsilon
    (136) epsilon -> .

    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    np_while_2                     shift and go to state 302
    epsilon                        shift and go to state 303

state 270

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY . WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    WHILE           shift and go to state 304


state 271

    (111) read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 111 (read -> READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON .)


state 272

    (113) variable_loop1 -> COMMA variable . variable_loop1
    (113) variable_loop1 -> . COMMA variable variable_loop1
    (114) variable_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 237
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    variable_loop1                 shift and go to state 305
    epsilon                        shift and go to state 238

state 273

    (16) variable1 -> DOT ID .

    COMMA           reduce using rule 16 (variable1 -> DOT ID .)
    CLOSE_PARENTHESIS reduce using rule 16 (variable1 -> DOT ID .)


state 274

    (115) write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 115 (write -> WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON .)


state 275

    (116) write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 116 (write_hyper_exp_loop -> hyper_exp np_add_write_quad write_hyper_exp_loop1 .)


state 276

    (117) write_hyper_exp_loop1 -> COMMA . hyper_exp np_add_write_quad write_hyper_exp_loop1
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 306
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 277

    (118) write_hyper_exp_loop1 -> epsilon .

    CLOSE_PARENTHESIS reduce using rule 118 (write_hyper_exp_loop1 -> epsilon .)


state 278

    (128) class_function -> AT_CLASS ID FUNCTION ID . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    OPEN_PARENTHESIS shift and go to state 307


state 279

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_KEY statement_loop CLOSE_KEY

    OPEN_KEY        shift and go to state 308


state 280

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . SEMICOLON

    SEMICOLON       shift and go to state 309


state 281

    (34) variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .

    CLASS           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    VAR             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    GROUP           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    OBJ             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    FUNCTION        reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    MAIN            reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    IF              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    FOR             reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    WHILE           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    DO              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    READ            reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    WRITE           reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    ID              reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    RETURN          reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)
    CLOSE_KEY       reduce using rule 34 (variable_declaration -> GROUP np_set_current_var_type ID np_set_current_var_name ASSIGN data_type np_set_current_var_data_type OPEN_BRACKET INT_VALUE CLOSE_BRACKET SEMICOLON np_add_variable .)


state 282

    (80) factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .

    MULTIPLICATION  reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    DIVISION        reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    PLUS            reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    MINUS           reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    GREATER_THAN    reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    LESS_THAN       reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    EQUAL_TO        reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    NOT_EQUAL_TO    reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    AND             reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    OR              reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    COMMA           reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    CLOSE_PARENTHESIS reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    SEMICOLON       reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)
    CLOSE_BRACKET   reduce using rule 80 (factor -> OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis .)


state 283

    (82) np_remove_open_parenthesis -> epsilon .

    MULTIPLICATION  reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    DIVISION        reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    PLUS            reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    MINUS           reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    GREATER_THAN    reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    LESS_THAN       reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    EQUAL_TO        reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    NOT_EQUAL_TO    reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    AND             reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    OR              reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    COMMA           reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    CLOSE_PARENTHESIS reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    SEMICOLON       reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)
    CLOSE_BRACKET   reduce using rule 82 (np_remove_open_parenthesis -> epsilon .)


state 284

    (53) hyper_exp1 -> AND np_add_operator super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (136) epsilon -> .

    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_hyper_exp                   shift and go to state 310
    epsilon                        shift and go to state 172

state 285

    (54) hyper_exp1 -> OR np_add_operator super_exp . np_hyper_exp hyper_exp1
    (56) np_hyper_exp -> . epsilon
    (136) epsilon -> .

    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_hyper_exp                   shift and go to state 311
    epsilon                        shift and go to state 172

state 286

    (58) super_exp1 -> GREATER_THAN np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_super_exp                   shift and go to state 312
    epsilon                        shift and go to state 174

state 287

    (59) super_exp1 -> LESS_THAN np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_super_exp                   shift and go to state 313
    epsilon                        shift and go to state 174

state 288

    (60) super_exp1 -> EQUAL_TO np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_super_exp                   shift and go to state 314
    epsilon                        shift and go to state 174

state 289

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp . np_super_exp super_exp1
    (63) np_super_exp -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_super_exp                   shift and go to state 315
    epsilon                        shift and go to state 174

state 290

    (65) exp1 -> PLUS np_add_operator term . np_exp exp1
    (68) np_exp -> . epsilon
    (136) epsilon -> .

    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_exp                         shift and go to state 316
    epsilon                        shift and go to state 176

state 291

    (66) exp1 -> MINUS np_add_operator term . np_exp exp1
    (68) np_exp -> . epsilon
    (136) epsilon -> .

    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_exp                         shift and go to state 317
    epsilon                        shift and go to state 176

state 292

    (70) term1 -> MULTIPLICATION np_add_operator factor . np_term term1
    (73) np_term -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  reduce using rule 136 (epsilon -> .)
    DIVISION        reduce using rule 136 (epsilon -> .)
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_term                        shift and go to state 318
    epsilon                        shift and go to state 178

state 293

    (71) term1 -> DIVISION np_add_operator factor . np_term term1
    (73) np_term -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  reduce using rule 136 (epsilon -> .)
    DIVISION        reduce using rule 136 (epsilon -> .)
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    np_term                        shift and go to state 319
    epsilon                        shift and go to state 178

state 294

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop . function_return CLOSE_KEY
    (132) function_return -> . RETURN hyper_exp SEMICOLON
    (133) function_return -> . epsilon
    (136) epsilon -> .

    RETURN          shift and go to state 321
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    function_return                shift and go to state 320
    epsilon                        shift and go to state 322

state 295

    (134) function_statement_loop -> statement_loop .

    RETURN          reduce using rule 134 (function_statement_loop -> statement_loop .)
    CLOSE_KEY       reduce using rule 134 (function_statement_loop -> statement_loop .)


state 296

    (135) function_statement_loop -> epsilon .

    RETURN          reduce using rule 135 (function_statement_loop -> epsilon .)
    CLOSE_KEY       reduce using rule 135 (function_statement_loop -> epsilon .)


state 297

    (93) parameter1 -> COMMA atomic_var_type data_type ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 93 (parameter1 -> COMMA atomic_var_type data_type ID parameter1 .)


state 298

    (94) parameter1 -> COMMA OBJ ID ID parameter1 .

    CLOSE_PARENTHESIS reduce using rule 94 (parameter1 -> COMMA OBJ ID ID parameter1 .)


state 299

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY . statement_loop CLOSE_KEY conditional1
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 323
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 300

    (102) cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS . cycle1
    (105) cycle1 -> . OPEN_KEY statement_loop CLOSE_KEY np_while_3

    OPEN_KEY        shift and go to state 325

    cycle1                         shift and go to state 324

state 301

    (123) function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .

    IF              reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_KEY       reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    MULTIPLICATION  reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    DIVISION        reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    GREATER_THAN    reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    LESS_THAN       reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    EQUAL_TO        reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    NOT_EQUAL_TO    reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    AND             reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    OR              reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 123 (function_call -> ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON .)


state 302

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 . cycle1
    (105) cycle1 -> . OPEN_KEY statement_loop CLOSE_KEY np_while_3

    OPEN_KEY        shift and go to state 325

    cycle1                         shift and go to state 326

state 303

    (107) np_while_2 -> epsilon .

    OPEN_KEY        reduce using rule 107 (np_while_2 -> epsilon .)


state 304

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE . OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    OPEN_PARENTHESIS shift and go to state 327


state 305

    (113) variable_loop1 -> COMMA variable variable_loop1 .

    CLOSE_PARENTHESIS reduce using rule 113 (variable_loop1 -> COMMA variable variable_loop1 .)


state 306

    (117) write_hyper_exp_loop1 -> COMMA hyper_exp . np_add_write_quad write_hyper_exp_loop1
    (119) np_add_write_quad -> . epsilon
    (136) epsilon -> .

    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    np_add_write_quad              shift and go to state 328
    epsilon                        shift and go to state 243

state 307

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (90) parameter -> . atomic_var_type data_type ID parameter1
    (91) parameter -> . OBJ ID ID parameter1
    (92) parameter -> . epsilon
    (39) atomic_var_type -> . VAR
    (40) atomic_var_type -> . GROUP
    (136) epsilon -> .

    OBJ             shift and go to state 61
    VAR             shift and go to state 63
    GROUP           shift and go to state 64
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    parameter                      shift and go to state 329
    atomic_var_type                shift and go to state 60
    epsilon                        shift and go to state 62

state 308

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY . statement_loop CLOSE_KEY
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 330
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 309

    (87) class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .

    FUNCTION        reduce using rule 87 (class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .)
    CLOSE_KEY       reduce using rule 87 (class_function_declaration -> FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg SEMICOLON .)


state 310

    (53) hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (136) epsilon -> .

    AND             shift and go to state 206
    OR              shift and go to state 207
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    hyper_exp1                     shift and go to state 331
    epsilon                        shift and go to state 208

state 311

    (54) hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp . hyper_exp1
    (53) hyper_exp1 -> . AND np_add_operator super_exp np_hyper_exp hyper_exp1
    (54) hyper_exp1 -> . OR np_add_operator super_exp np_hyper_exp hyper_exp1
    (55) hyper_exp1 -> . epsilon
    (136) epsilon -> .

    AND             shift and go to state 206
    OR              shift and go to state 207
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    hyper_exp1                     shift and go to state 332
    epsilon                        shift and go to state 208

state 312

    (58) super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    shift and go to state 210
    LESS_THAN       shift and go to state 211
    EQUAL_TO        shift and go to state 212
    NOT_EQUAL_TO    shift and go to state 213
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    super_exp1                     shift and go to state 333
    epsilon                        shift and go to state 214

state 313

    (59) super_exp1 -> LESS_THAN np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    shift and go to state 210
    LESS_THAN       shift and go to state 211
    EQUAL_TO        shift and go to state 212
    NOT_EQUAL_TO    shift and go to state 213
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    super_exp1                     shift and go to state 334
    epsilon                        shift and go to state 214

state 314

    (60) super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    shift and go to state 210
    LESS_THAN       shift and go to state 211
    EQUAL_TO        shift and go to state 212
    NOT_EQUAL_TO    shift and go to state 213
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    super_exp1                     shift and go to state 335
    epsilon                        shift and go to state 214

state 315

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp . super_exp1
    (58) super_exp1 -> . GREATER_THAN np_add_operator exp np_super_exp super_exp1
    (59) super_exp1 -> . LESS_THAN np_add_operator exp np_super_exp super_exp1
    (60) super_exp1 -> . EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (61) super_exp1 -> . NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1
    (62) super_exp1 -> . epsilon
    (136) epsilon -> .

    GREATER_THAN    shift and go to state 210
    LESS_THAN       shift and go to state 211
    EQUAL_TO        shift and go to state 212
    NOT_EQUAL_TO    shift and go to state 213
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    super_exp1                     shift and go to state 336
    epsilon                        shift and go to state 214

state 316

    (65) exp1 -> PLUS np_add_operator term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (136) epsilon -> .

    PLUS            shift and go to state 216
    MINUS           shift and go to state 217
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    exp1                           shift and go to state 337
    epsilon                        shift and go to state 218

state 317

    (66) exp1 -> MINUS np_add_operator term np_exp . exp1
    (65) exp1 -> . PLUS np_add_operator term np_exp exp1
    (66) exp1 -> . MINUS np_add_operator term np_exp exp1
    (67) exp1 -> . epsilon
    (136) epsilon -> .

    PLUS            shift and go to state 216
    MINUS           shift and go to state 217
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    exp1                           shift and go to state 338
    epsilon                        shift and go to state 218

state 318

    (70) term1 -> MULTIPLICATION np_add_operator factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  shift and go to state 220
    DIVISION        shift and go to state 221
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    term1                          shift and go to state 339
    epsilon                        shift and go to state 222

state 319

    (71) term1 -> DIVISION np_add_operator factor np_term . term1
    (70) term1 -> . MULTIPLICATION np_add_operator factor np_term term1
    (71) term1 -> . DIVISION np_add_operator factor np_term term1
    (72) term1 -> . epsilon
    (136) epsilon -> .

    MULTIPLICATION  shift and go to state 220
    DIVISION        shift and go to state 221
    PLUS            reduce using rule 136 (epsilon -> .)
    MINUS           reduce using rule 136 (epsilon -> .)
    GREATER_THAN    reduce using rule 136 (epsilon -> .)
    LESS_THAN       reduce using rule 136 (epsilon -> .)
    EQUAL_TO        reduce using rule 136 (epsilon -> .)
    NOT_EQUAL_TO    reduce using rule 136 (epsilon -> .)
    AND             reduce using rule 136 (epsilon -> .)
    OR              reduce using rule 136 (epsilon -> .)
    COMMA           reduce using rule 136 (epsilon -> .)
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)
    SEMICOLON       reduce using rule 136 (epsilon -> .)
    CLOSE_BRACKET   reduce using rule 136 (epsilon -> .)

    term1                          shift and go to state 340
    epsilon                        shift and go to state 222

state 320

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return . CLOSE_KEY

    CLOSE_KEY       shift and go to state 341


state 321

    (132) function_return -> RETURN . hyper_exp SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 342
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 322

    (133) function_return -> epsilon .

    CLOSE_KEY       reduce using rule 133 (function_return -> epsilon .)


state 323

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop . CLOSE_KEY conditional1

    CLOSE_KEY       shift and go to state 343


state 324

    (102) cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .

    IF              reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    FOR             reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    WHILE           reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    DO              reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    READ            reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    WRITE           reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    ID              reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    CLOSE_KEY       reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)
    RETURN          reduce using rule 102 (cycle -> FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1 .)


state 325

    (105) cycle1 -> OPEN_KEY . statement_loop CLOSE_KEY np_while_3
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 344
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 326

    (103) cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .

    IF              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    FOR             reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    WHILE           reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    DO              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    READ            reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    WRITE           reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    ID              reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    CLOSE_KEY       reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)
    RETURN          reduce using rule 103 (cycle -> WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1 .)


state 327

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS . hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (52) hyper_exp -> . super_exp np_hyper_exp hyper_exp1
    (57) super_exp -> . exp np_super_exp super_exp1
    (64) exp -> . term np_exp exp1
    (69) term -> . factor np_term term1
    (74) factor -> . function_call
    (75) factor -> . FLOAT_VALUE
    (76) factor -> . INT_VALUE
    (77) factor -> . BOOL_VALUE
    (78) factor -> . STRING_VALUE
    (79) factor -> . variable
    (80) factor -> . OPEN_PARENTHESIS np_add_open_parenthesis hyper_exp CLOSE_PARENTHESIS np_remove_open_parenthesis
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    FLOAT_VALUE     shift and go to state 128
    INT_VALUE       shift and go to state 129
    BOOL_VALUE      shift and go to state 130
    STRING_VALUE    shift and go to state 131
    OPEN_PARENTHESIS shift and go to state 118
    ID              shift and go to state 105

    hyper_exp                      shift and go to state 345
    super_exp                      shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    function_call                  shift and go to state 127
    variable                       shift and go to state 132

state 328

    (117) write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad . write_hyper_exp_loop1
    (117) write_hyper_exp_loop1 -> . COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1
    (118) write_hyper_exp_loop1 -> . epsilon
    (136) epsilon -> .

    COMMA           shift and go to state 276
    CLOSE_PARENTHESIS reduce using rule 136 (epsilon -> .)

    write_hyper_exp_loop1          shift and go to state 346
    epsilon                        shift and go to state 277

state 329

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    CLOSE_PARENTHESIS shift and go to state 347


state 330

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop . CLOSE_KEY

    CLOSE_KEY       shift and go to state 348


state 331

    (53) hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 53 (hyper_exp1 -> AND np_add_operator super_exp np_hyper_exp hyper_exp1 .)


state 332

    (54) hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .

    COMMA           reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    SEMICOLON       reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)
    CLOSE_BRACKET   reduce using rule 54 (hyper_exp1 -> OR np_add_operator super_exp np_hyper_exp hyper_exp1 .)


state 333

    (58) super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 58 (super_exp1 -> GREATER_THAN np_add_operator exp np_super_exp super_exp1 .)


state 334

    (59) super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 59 (super_exp1 -> LESS_THAN np_add_operator exp np_super_exp super_exp1 .)


state 335

    (60) super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 60 (super_exp1 -> EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)


state 336

    (61) super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .

    AND             reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    OR              reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    COMMA           reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_PARENTHESIS reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    SEMICOLON       reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)
    CLOSE_BRACKET   reduce using rule 61 (super_exp1 -> NOT_EQUAL_TO np_add_operator exp np_super_exp super_exp1 .)


state 337

    (65) exp1 -> PLUS np_add_operator term np_exp exp1 .

    GREATER_THAN    reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    LESS_THAN       reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    EQUAL_TO        reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    AND             reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    OR              reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    COMMA           reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    SEMICOLON       reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 65 (exp1 -> PLUS np_add_operator term np_exp exp1 .)


state 338

    (66) exp1 -> MINUS np_add_operator term np_exp exp1 .

    GREATER_THAN    reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    LESS_THAN       reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    EQUAL_TO        reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    NOT_EQUAL_TO    reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    AND             reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    OR              reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    COMMA           reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    CLOSE_PARENTHESIS reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    SEMICOLON       reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)
    CLOSE_BRACKET   reduce using rule 66 (exp1 -> MINUS np_add_operator term np_exp exp1 .)


state 339

    (70) term1 -> MULTIPLICATION np_add_operator factor np_term term1 .

    PLUS            reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    MINUS           reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    GREATER_THAN    reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    LESS_THAN       reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    EQUAL_TO        reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    AND             reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    OR              reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    COMMA           reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    SEMICOLON       reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 70 (term1 -> MULTIPLICATION np_add_operator factor np_term term1 .)


state 340

    (71) term1 -> DIVISION np_add_operator factor np_term term1 .

    PLUS            reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    MINUS           reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    GREATER_THAN    reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    LESS_THAN       reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    EQUAL_TO        reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    NOT_EQUAL_TO    reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    AND             reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    OR              reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    COMMA           reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    CLOSE_PARENTHESIS reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    SEMICOLON       reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)
    CLOSE_BRACKET   reduce using rule 71 (term1 -> DIVISION np_add_operator factor np_term term1 .)


state 341

    (129) function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .

    CLASS           reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    VAR             reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    GROUP           reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    OBJ             reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    FUNCTION        reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)
    MAIN            reduce using rule 129 (function_declaration -> FUNCTION ID np_add_function_internal_scope OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg np_set_function_return_type OPEN_KEY variable_declaration_loop function_statement_loop function_return CLOSE_KEY .)


state 342

    (132) function_return -> RETURN hyper_exp . SEMICOLON

    SEMICOLON       shift and go to state 349


state 343

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY . conditional1
    (97) conditional1 -> . ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
    (98) conditional1 -> . np_if_2
    (100) np_if_2 -> . epsilon
    (136) epsilon -> .

    ELSE            shift and go to state 351
    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)

    conditional1                   shift and go to state 350
    np_if_2                        shift and go to state 352
    epsilon                        shift and go to state 353

state 344

    (105) cycle1 -> OPEN_KEY statement_loop . CLOSE_KEY np_while_3

    CLOSE_KEY       shift and go to state 354


state 345

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp . CLOSE_PARENTHESIS np_do_while_2 SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 355


state 346

    (117) write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1 .

    CLOSE_PARENTHESIS reduce using rule 117 (write_hyper_exp_loop1 -> COMMA hyper_exp np_add_write_quad write_hyper_exp_loop1 .)


state 347

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY

    RETURNS         shift and go to state 356


state 348

    (30) constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .

    AT_CLASS        reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    CLASS           reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    VAR             reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    GROUP           reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    OBJ             reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    FUNCTION        reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)
    MAIN            reduce using rule 30 (constructor -> CONSTRUCTOR ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_KEY statement_loop CLOSE_KEY .)


state 349

    (132) function_return -> RETURN hyper_exp SEMICOLON .

    CLOSE_KEY       reduce using rule 132 (function_return -> RETURN hyper_exp SEMICOLON .)


state 350

    (96) conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .

    IF              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    FOR             reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    WHILE           reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    DO              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    READ            reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    WRITE           reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    ID              reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    CLOSE_KEY       reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)
    RETURN          reduce using rule 96 (conditional -> IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1 .)


state 351

    (97) conditional1 -> ELSE . np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2
    (101) np_if_3 -> . epsilon
    (136) epsilon -> .

    OPEN_KEY        reduce using rule 136 (epsilon -> .)

    np_if_3                        shift and go to state 357
    epsilon                        shift and go to state 358

state 352

    (98) conditional1 -> np_if_2 .

    IF              reduce using rule 98 (conditional1 -> np_if_2 .)
    FOR             reduce using rule 98 (conditional1 -> np_if_2 .)
    WHILE           reduce using rule 98 (conditional1 -> np_if_2 .)
    DO              reduce using rule 98 (conditional1 -> np_if_2 .)
    READ            reduce using rule 98 (conditional1 -> np_if_2 .)
    WRITE           reduce using rule 98 (conditional1 -> np_if_2 .)
    ID              reduce using rule 98 (conditional1 -> np_if_2 .)
    CLOSE_KEY       reduce using rule 98 (conditional1 -> np_if_2 .)
    RETURN          reduce using rule 98 (conditional1 -> np_if_2 .)


state 353

    (100) np_if_2 -> epsilon .

    IF              reduce using rule 100 (np_if_2 -> epsilon .)
    FOR             reduce using rule 100 (np_if_2 -> epsilon .)
    WHILE           reduce using rule 100 (np_if_2 -> epsilon .)
    DO              reduce using rule 100 (np_if_2 -> epsilon .)
    READ            reduce using rule 100 (np_if_2 -> epsilon .)
    WRITE           reduce using rule 100 (np_if_2 -> epsilon .)
    ID              reduce using rule 100 (np_if_2 -> epsilon .)
    CLOSE_KEY       reduce using rule 100 (np_if_2 -> epsilon .)
    RETURN          reduce using rule 100 (np_if_2 -> epsilon .)


state 354

    (105) cycle1 -> OPEN_KEY statement_loop CLOSE_KEY . np_while_3
    (108) np_while_3 -> . epsilon
    (136) epsilon -> .

    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)

    np_while_3                     shift and go to state 359
    epsilon                        shift and go to state 360

state 355

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS . np_do_while_2 SEMICOLON
    (110) np_do_while_2 -> . epsilon
    (136) epsilon -> .

    SEMICOLON       reduce using rule 136 (epsilon -> .)

    np_do_while_2                  shift and go to state 361
    epsilon                        shift and go to state 362

state 356

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS . return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY
    (88) return_arg -> . data_type
    (89) return_arg -> . VOID
    (83) data_type -> . INT
    (84) data_type -> . FLOAT
    (85) data_type -> . STRING
    (86) data_type -> . BOOL

    VOID            shift and go to state 135
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    return_arg                     shift and go to state 363
    data_type                      shift and go to state 134

state 357

    (97) conditional1 -> ELSE np_if_3 . OPEN_KEY statement_loop CLOSE_KEY np_if_2

    OPEN_KEY        shift and go to state 364


state 358

    (101) np_if_3 -> epsilon .

    OPEN_KEY        reduce using rule 101 (np_if_3 -> epsilon .)


state 359

    (105) cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .

    IF              reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    FOR             reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    WHILE           reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    DO              reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    READ            reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    WRITE           reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    ID              reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    CLOSE_KEY       reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)
    RETURN          reduce using rule 105 (cycle1 -> OPEN_KEY statement_loop CLOSE_KEY np_while_3 .)


state 360

    (108) np_while_3 -> epsilon .

    IF              reduce using rule 108 (np_while_3 -> epsilon .)
    FOR             reduce using rule 108 (np_while_3 -> epsilon .)
    WHILE           reduce using rule 108 (np_while_3 -> epsilon .)
    DO              reduce using rule 108 (np_while_3 -> epsilon .)
    READ            reduce using rule 108 (np_while_3 -> epsilon .)
    WRITE           reduce using rule 108 (np_while_3 -> epsilon .)
    ID              reduce using rule 108 (np_while_3 -> epsilon .)
    CLOSE_KEY       reduce using rule 108 (np_while_3 -> epsilon .)
    RETURN          reduce using rule 108 (np_while_3 -> epsilon .)


state 361

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 . SEMICOLON

    SEMICOLON       shift and go to state 365


state 362

    (110) np_do_while_2 -> epsilon .

    SEMICOLON       reduce using rule 110 (np_do_while_2 -> epsilon .)


state 363

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg . OPEN_KEY function_statement_loop function_return CLOSE_KEY

    OPEN_KEY        shift and go to state 366


state 364

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY . statement_loop CLOSE_KEY np_if_2
    (8) statement_loop -> . statement statement_loop1
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    statement_loop                 shift and go to state 367
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 365

    (104) cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .

    IF              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    FOR             reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    WHILE           reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    DO              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    READ            reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    WRITE           reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    ID              reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    CLOSE_KEY       reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)
    RETURN          reduce using rule 104 (cycle -> DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON .)


state 366

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY . function_statement_loop function_return CLOSE_KEY
    (134) function_statement_loop -> . statement_loop
    (135) function_statement_loop -> . epsilon
    (8) statement_loop -> . statement statement_loop1
    (136) epsilon -> .
    (44) statement -> . assignment
    (45) statement -> . conditional
    (46) statement -> . cycle
    (47) statement -> . read
    (48) statement -> . write
    (49) statement -> . function_call
    (50) assignment -> . variable ASSIGN hyper_exp SEMICOLON
    (96) conditional -> . IF OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_if_1 OPEN_KEY statement_loop CLOSE_KEY conditional1
    (102) cycle -> . FOR OPEN_PARENTHESIS ID IN ID CLOSE_PARENTHESIS cycle1
    (103) cycle -> . WHILE np_while_1 OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_while_2 cycle1
    (104) cycle -> . DO np_do_while_1 OPEN_KEY statement_loop CLOSE_KEY WHILE OPEN_PARENTHESIS hyper_exp CLOSE_PARENTHESIS np_do_while_2 SEMICOLON
    (111) read -> . READ OPEN_PARENTHESIS variable_loop CLOSE_PARENTHESIS SEMICOLON
    (115) write -> . WRITE OPEN_PARENTHESIS write_hyper_exp_loop CLOSE_PARENTHESIS SEMICOLON
    (123) function_call -> . ID function_call1 OPEN_PARENTHESIS function_call2 CLOSE_PARENTHESIS SEMICOLON
    (14) variable -> . ID variable1

    RETURN          reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    IF              shift and go to state 103
    FOR             shift and go to state 104
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    READ            shift and go to state 108
    WRITE           shift and go to state 109
    ID              shift and go to state 105

    function_statement_loop        shift and go to state 368
    statement_loop                 shift and go to state 295
    epsilon                        shift and go to state 296
    statement                      shift and go to state 95
    assignment                     shift and go to state 96
    conditional                    shift and go to state 97
    cycle                          shift and go to state 98
    read                           shift and go to state 99
    write                          shift and go to state 100
    function_call                  shift and go to state 101
    variable                       shift and go to state 102

state 367

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop . CLOSE_KEY np_if_2

    CLOSE_KEY       shift and go to state 369


state 368

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop . function_return CLOSE_KEY
    (132) function_return -> . RETURN hyper_exp SEMICOLON
    (133) function_return -> . epsilon
    (136) epsilon -> .

    RETURN          shift and go to state 321
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)

    function_return                shift and go to state 370
    epsilon                        shift and go to state 322

state 369

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY . np_if_2
    (100) np_if_2 -> . epsilon
    (136) epsilon -> .

    IF              reduce using rule 136 (epsilon -> .)
    FOR             reduce using rule 136 (epsilon -> .)
    WHILE           reduce using rule 136 (epsilon -> .)
    DO              reduce using rule 136 (epsilon -> .)
    READ            reduce using rule 136 (epsilon -> .)
    WRITE           reduce using rule 136 (epsilon -> .)
    ID              reduce using rule 136 (epsilon -> .)
    CLOSE_KEY       reduce using rule 136 (epsilon -> .)
    RETURN          reduce using rule 136 (epsilon -> .)

    np_if_2                        shift and go to state 371
    epsilon                        shift and go to state 353

state 370

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return . CLOSE_KEY

    CLOSE_KEY       shift and go to state 372


state 371

    (97) conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .

    IF              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    FOR             reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    WHILE           reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    DO              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    READ            reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    WRITE           reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    ID              reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    CLOSE_KEY       reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)
    RETURN          reduce using rule 97 (conditional1 -> ELSE np_if_3 OPEN_KEY statement_loop CLOSE_KEY np_if_2 .)


state 372

    (128) class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .

    AT_CLASS        reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    CLASS           reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    VAR             reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    GROUP           reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    OBJ             reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    FUNCTION        reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)
    MAIN            reduce using rule 128 (class_function -> AT_CLASS ID FUNCTION ID OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS RETURNS return_arg OPEN_KEY function_statement_loop function_return CLOSE_KEY .)

